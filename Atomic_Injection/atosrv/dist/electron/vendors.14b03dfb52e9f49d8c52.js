(window.webpackJsonp=window.webpackJsonp||[]).push([[152],{1349:function(e,t,n){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n),Object.defineProperty(e,r,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),o=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),s=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.hasOwnProperty.call(e,n)&&r(t,e,n);return o(t,e),t},a=this&&this.__exportStar||function(e,t){for(var n in e)"default"===n||t.hasOwnProperty(n)||r(t,e,n)};Object.defineProperty(t,"__esModule",{value:!0}),t.keyStores=s(n(2924)),a(n(1352),t),a(n(2942),t),n(2943)},1350:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.InMemoryKeyStore=void 0;const r=n(546),o=n(238);class InMemoryKeyStore extends r.KeyStore{constructor(){super(),this.keys={}}async setKey(e,t,n){this.keys[`${t}:${e}`]=n.toString()}async getKey(e,t){const n=this.keys[`${t}:${e}`];return n?o.KeyPair.fromString(n):null}async removeKey(e,t){delete this.keys[`${t}:${e}`]}async clear(){this.keys={}}async getNetworks(){const e=new Set;return Object.keys(this.keys).forEach(t=>{const n=t.split(":");e.add(n[1])}),Array.from(e.values())}async getAccounts(e){const t=new Array;return Object.keys(this.keys).forEach(n=>{const r=n.split(":");r[r.length-1]===e&&t.push(r.slice(0,r.length-1).join(":"))}),t}toString(){return"InMemoryKeyStore"}}t.InMemoryKeyStore=InMemoryKeyStore},1352:function(e,t,n){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n),Object.defineProperty(e,r,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),o=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),s=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.hasOwnProperty.call(e,n)&&r(t,e,n);return o(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.WalletConnection=t.WalletAccount=t.ConnectedWalletAccount=t.Near=t.KeyPair=t.Signer=t.InMemorySigner=t.Contract=t.Connection=t.Account=t.multisig=t.validators=t.transactions=t.utils=t.providers=t.accountCreator=void 0;const a=s(n(446));t.providers=a;const i=s(n(1354));t.utils=i;const c=s(n(548));t.transactions=c;const u=s(n(2938));t.validators=u;const d=n(549);Object.defineProperty(t,"Account",{enumerable:!0,get:function(){return d.Account}});const l=s(n(2940));t.multisig=l;const p=s(n(1356));t.accountCreator=p;const y=n(1357);Object.defineProperty(t,"Connection",{enumerable:!0,get:function(){return y.Connection}});const h=n(1358);Object.defineProperty(t,"Signer",{enumerable:!0,get:function(){return h.Signer}}),Object.defineProperty(t,"InMemorySigner",{enumerable:!0,get:function(){return h.InMemorySigner}});const m=n(1359);Object.defineProperty(t,"Contract",{enumerable:!0,get:function(){return m.Contract}});const g=n(238);Object.defineProperty(t,"KeyPair",{enumerable:!0,get:function(){return g.KeyPair}});const f=n(1360);Object.defineProperty(t,"Near",{enumerable:!0,get:function(){return f.Near}});const _=n(2941);Object.defineProperty(t,"ConnectedWalletAccount",{enumerable:!0,get:function(){return _.ConnectedWalletAccount}}),Object.defineProperty(t,"WalletAccount",{enumerable:!0,get:function(){return _.WalletAccount}}),Object.defineProperty(t,"WalletConnection",{enumerable:!0,get:function(){return _.WalletConnection}})},1353:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getTransactionLastResult=t.Provider=t.IdType=t.FinalExecutionStatusBasic=t.ExecutionStatusBasic=void 0,function(e){e.Unknown="Unknown",e.Pending="Pending",e.Failure="Failure"}(t.ExecutionStatusBasic||(t.ExecutionStatusBasic={})),function(e){e.NotStarted="NotStarted",e.Started="Started",e.Failure="Failure"}(t.FinalExecutionStatusBasic||(t.FinalExecutionStatusBasic={})),function(e){e.Transaction="transaction",e.Receipt="receipt"}(t.IdType||(t.IdType={}));t.Provider=class Provider{},t.getTransactionLastResult=function(e){if("object"==typeof e.status&&"string"==typeof e.status.SuccessValue){const t=Buffer.from(e.status.SuccessValue,"base64").toString();try{return JSON.parse(t)}catch(e){return t}}return null}},1356:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.UrlAccountCreator=t.LocalAccountCreator=t.AccountCreator=void 0;const r=n(547);class AccountCreator{}t.AccountCreator=AccountCreator;t.LocalAccountCreator=class LocalAccountCreator extends AccountCreator{constructor(e,t){super(),this.masterAccount=e,this.initialBalance=t}async createAccount(e,t){await this.masterAccount.createAccount(e,t,this.initialBalance)}};t.UrlAccountCreator=class UrlAccountCreator extends AccountCreator{constructor(e,t){super(),this.connection=e,this.helperUrl=t}async createAccount(e,t){await r.fetchJson(this.helperUrl+"/account",JSON.stringify({newAccountId:e,newAccountPublicKey:t.toString()}))}}},1357:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Connection=void 0;const r=n(446),o=n(1358);class Connection{constructor(e,t,n){this.networkId=e,this.provider=t,this.signer=n}static fromConfig(e){const t=function(e){switch(e.type){case void 0:return e;case"JsonRpcProvider":return new r.JsonRpcProvider({...e.args});default:throw new Error("Unknown provider type "+e.type)}}(e.provider),n=function(e){switch(e.type){case void 0:return e;case"InMemorySigner":return new o.InMemorySigner(e.keyStore);default:throw new Error("Unknown signer type "+e.type)}}(e.signer);return new Connection(e.networkId,t,n)}}t.Connection=Connection},1358:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.InMemorySigner=t.Signer=void 0;const o=r(n(798)),s=n(238),a=n(1350);class Signer{}t.Signer=Signer;class InMemorySigner extends Signer{constructor(e){super(),this.keyStore=e}static async fromKeyPair(e,t,n){const r=new a.InMemoryKeyStore;return await r.setKey(e,t,n),new InMemorySigner(r)}async createKey(e,t){const n=s.KeyPair.fromRandom("ed25519");return await this.keyStore.setKey(t,e,n),n.getPublicKey()}async getPublicKey(e,t){const n=await this.keyStore.getKey(t,e);return null===n?null:n.getPublicKey()}async signMessage(e,t,n){const r=new Uint8Array(o.default.sha256.array(e));if(!t)throw new Error("InMemorySigner requires provided account id");const s=await this.keyStore.getKey(n,t);if(null===s)throw new Error(`Key for ${t} not found in ${n}`);return s.sign(r)}toString(){return`InMemorySigner(${this.keyStore})`}}t.InMemorySigner=InMemorySigner},1359:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.Contract=void 0;const o=r(n(301)),s=r(n(357)),a=n(446),i=n(358);function c(e,t){return{[e]:(...e)=>t(...e)}[e]}const u=e=>e&&void 0!==e.byteLength&&e.byteLength===e.length,d=e=>"[object Object]"===Object.prototype.toString.call(e);t.Contract=class Contract{constructor(e,t,n){this.account=e,this.contractId=t;const{viewMethods:r=[],changeMethods:o=[]}=n;r.forEach(e=>{Object.defineProperty(this,e,{writable:!1,enumerable:!0,value:c(e,async(t={},n={},...r)=>{if(r.length||!d(t)&&!u(t)||!d(n))throw new i.PositionalArgsError;return this.account.viewFunction(this.contractId,e,t,n)})})}),o.forEach(e=>{Object.defineProperty(this,e,{writable:!1,enumerable:!0,value:c(e,async(...t)=>{if(t.length&&(t.length>3||!d(t[0])&&!u(t[0])))throw new i.PositionalArgsError;if(t.length>1||!t[0]||!t[0].args){return s.default("contract.methodName(args, gas, amount)")("use `contract.methodName({ args, gas?, amount?, callbackUrl?, meta? })` instead"),this._changeMethod({methodName:e,args:t[0],gas:t[1],amount:t[2]})}return this._changeMethod({methodName:e,...t[0]})})})})}async _changeMethod({args:e,methodName:t,gas:n,amount:r,meta:s,callbackUrl:c}){!function(e){for(const t of Object.keys(e)){const n=e[t];if(n&&!o.default.isBN(n)&&isNaN(n))throw new i.ArgumentTypeError(t,"number, decimal string or BN",n)}}({gas:n,amount:r});const u=await this.account.functionCall({contractId:this.contractId,methodName:t,args:e,gas:n,attachedDeposit:r,walletMeta:s,walletCallbackUrl:c});return a.getTransactionLastResult(u)}}},1360:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.Near=void 0;const o=r(n(301)),s=n(549),a=n(1357),i=n(1359),c=n(1356);t.Near=class Near{constructor(e){if(this.config=e,this.connection=a.Connection.fromConfig({networkId:e.networkId,provider:{type:"JsonRpcProvider",args:{url:e.nodeUrl,headers:e.headers}},signer:e.signer||{type:"InMemorySigner",keyStore:e.keyStore||e.deps.keyStore}}),e.masterAccount){const t=e.initialBalance?new o.default(e.initialBalance):new o.default("500000000000000000000000000");this.accountCreator=new c.LocalAccountCreator(new s.Account(this.connection,e.masterAccount),t)}else e.helperUrl?this.accountCreator=new c.UrlAccountCreator(this.connection,e.helperUrl):this.accountCreator=null}async account(e){return new s.Account(this.connection,e)}async createAccount(e,t){if(!this.accountCreator)throw new Error("Must specify account creator, either via masterAccount or helperUrl configuration settings.");return await this.accountCreator.createAccount(e,t),new s.Account(this.connection,e)}async loadContract(e,t){const n=new s.Account(this.connection,t.sender);return new i.Contract(n,e,t)}async sendTokens(e,t,n){console.warn("near.sendTokens is deprecated. Use `yourAccount.sendMoney` instead.");const r=new s.Account(this.connection,t);return(await r.sendMoney(n,e)).transaction_outcome.id}}},2924:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.MergeKeyStore=t.BrowserLocalStorageKeyStore=t.InMemoryKeyStore=t.KeyStore=void 0;const r=n(546);Object.defineProperty(t,"KeyStore",{enumerable:!0,get:function(){return r.KeyStore}});const o=n(1350);Object.defineProperty(t,"InMemoryKeyStore",{enumerable:!0,get:function(){return o.InMemoryKeyStore}});const s=n(2926);Object.defineProperty(t,"BrowserLocalStorageKeyStore",{enumerable:!0,get:function(){return s.BrowserLocalStorageKeyStore}});const a=n(2927);Object.defineProperty(t,"MergeKeyStore",{enumerable:!0,get:function(){return a.MergeKeyStore}})},2926:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.BrowserLocalStorageKeyStore=void 0;const r=n(546),o=n(238);class BrowserLocalStorageKeyStore extends r.KeyStore{constructor(e=window.localStorage,t="near-api-js:keystore:"){super(),this.localStorage=e,this.prefix=t}async setKey(e,t,n){this.localStorage.setItem(this.storageKeyForSecretKey(e,t),n.toString())}async getKey(e,t){const n=this.localStorage.getItem(this.storageKeyForSecretKey(e,t));return n?o.KeyPair.fromString(n):null}async removeKey(e,t){this.localStorage.removeItem(this.storageKeyForSecretKey(e,t))}async clear(){for(const e of this.storageKeys())e.startsWith(this.prefix)&&this.localStorage.removeItem(e)}async getNetworks(){const e=new Set;for(const t of this.storageKeys())if(t.startsWith(this.prefix)){const n=t.substring(this.prefix.length).split(":");e.add(n[1])}return Array.from(e.values())}async getAccounts(e){const t=new Array;for(const n of this.storageKeys())if(n.startsWith(this.prefix)){const r=n.substring(this.prefix.length).split(":");r[1]===e&&t.push(r[0])}return t}storageKeyForSecretKey(e,t){return`${this.prefix}${t}:${e}`}*storageKeys(){for(let e=0;e<this.localStorage.length;e++)yield this.localStorage.key(e)}}t.BrowserLocalStorageKeyStore=BrowserLocalStorageKeyStore},2927:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.MergeKeyStore=void 0;const r=n(546);class MergeKeyStore extends r.KeyStore{constructor(e,t={writeKeyStoreIndex:0}){super(),this.options=t,this.keyStores=e}async setKey(e,t,n){await this.keyStores[this.options.writeKeyStoreIndex].setKey(e,t,n)}async getKey(e,t){for(const n of this.keyStores){const r=await n.getKey(e,t);if(r)return r}return null}async removeKey(e,t){for(const n of this.keyStores)await n.removeKey(e,t)}async clear(){for(const e of this.keyStores)await e.clear()}async getNetworks(){const e=new Set;for(const t of this.keyStores)for(const n of await t.getNetworks())e.add(n);return Array.from(e)}async getAccounts(e){const t=new Set;for(const n of this.keyStores)for(const r of await n.getAccounts(e))t.add(r);return Array.from(t)}toString(){return`MergeKeyStore(${this.keyStores.join(", ")})`}}t.MergeKeyStore=MergeKeyStore},2928:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.JsonRpcProvider=t.ErrorContext=t.TypedError=void 0;const o=r(n(357)),s=n(1353),a=n(547),i=n(358);Object.defineProperty(t,"TypedError",{enumerable:!0,get:function(){return i.TypedError}}),Object.defineProperty(t,"ErrorContext",{enumerable:!0,get:function(){return i.ErrorContext}});const c=n(356),u=r(n(796)),d=n(797);let l=123;class JsonRpcProvider extends s.Provider{constructor(e){if(super(),null!=e&&"object"==typeof e)this.connection=e;else{o.default("JsonRpcProvider(url?: string)")("use `JsonRpcProvider(connectionInfo: ConnectionInfo)` instead"),this.connection={url:e}}}async status(){return this.sendJsonRpc("status",[])}async sendTransaction(e){const t=e.encode();return this.sendJsonRpc("broadcast_tx_commit",[Buffer.from(t).toString("base64")])}async sendTransactionAsync(e){const t=e.encode();return this.sendJsonRpc("broadcast_tx_async",[Buffer.from(t).toString("base64")])}async txStatus(e,t){return"string"==typeof e?this.txStatusString(e,t):this.txStatusUint8Array(e,t)}async txStatusUint8Array(e,t){return this.sendJsonRpc("tx",[c.baseEncode(e),t])}async txStatusString(e,t){return this.sendJsonRpc("tx",[e,t])}async txStatusReceipts(e,t){return this.sendJsonRpc("EXPERIMENTAL_tx_status",[c.baseEncode(e),t])}async query(...e){let t;if(1===e.length)t=await this.sendJsonRpc("query",e[0]);else{const[n,r]=e;t=await this.sendJsonRpc("query",[n,r])}if(t&&t.error)throw new i.TypedError(`Querying ${e} failed: ${t.error}.\n${JSON.stringify(t,null,2)}`,d.getErrorTypeFromErrorMessage(t.error));return t}async block(e){const{finality:t}=e;let{blockId:n}=e;if("object"!=typeof e){o.default("JsonRpcProvider.block(blockId)")("use `block({ blockId })` or `block({ finality })` instead"),n=e}return this.sendJsonRpc("block",{block_id:n,finality:t})}async blockChanges(e){const{finality:t}=e,{blockId:n}=e;return this.sendJsonRpc("EXPERIMENTAL_changes_in_block",{block_id:n,finality:t})}async chunk(e){return this.sendJsonRpc("chunk",[e])}async validators(e){return this.sendJsonRpc("validators",[e])}async experimental_genesisConfig(){return o.default("JsonRpcProvider.experimental_protocolConfig()")("use `experimental_protocolConfig({ sync_checkpoint: 'genesis' })` to fetch the up-to-date or genesis protocol config explicitly"),await this.sendJsonRpc("EXPERIMENTAL_protocol_config",{sync_checkpoint:"genesis"})}async experimental_protocolConfig(e){return await this.sendJsonRpc("EXPERIMENTAL_protocol_config",e)}async experimental_lightClientProof(e){return o.default("JsonRpcProvider.experimental_lightClientProof(request)")("use `lightClientProof` instead"),await this.lightClientProof(e)}async lightClientProof(e){return await this.sendJsonRpc("EXPERIMENTAL_light_client_proof",e)}async accessKeyChanges(e,t){const{finality:n}=t,{blockId:r}=t;return this.sendJsonRpc("EXPERIMENTAL_changes",{changes_type:"all_access_key_changes",account_ids:e,block_id:r,finality:n})}async singleAccessKeyChanges(e,t){const{finality:n}=t,{blockId:r}=t;return this.sendJsonRpc("EXPERIMENTAL_changes",{changes_type:"single_access_key_changes",keys:e,block_id:r,finality:n})}async accountChanges(e,t){const{finality:n}=t,{blockId:r}=t;return this.sendJsonRpc("EXPERIMENTAL_changes",{changes_type:"account_changes",account_ids:e,block_id:r,finality:n})}async contractStateChanges(e,t,n=""){const{finality:r}=t,{blockId:o}=t;return this.sendJsonRpc("EXPERIMENTAL_changes",{changes_type:"data_changes",account_ids:e,key_prefix_base64:n,block_id:o,finality:r})}async contractCodeChanges(e,t){const{finality:n}=t,{blockId:r}=t;return this.sendJsonRpc("EXPERIMENTAL_changes",{changes_type:"contract_code_changes",account_ids:e,block_id:r,finality:n})}async gasPrice(e){return await this.sendJsonRpc("gas_price",[e])}async sendJsonRpc(e,t){const n=await u.default(500,12,1.5,async()=>{try{const n={method:e,params:t,id:l++,jsonrpc:"2.0"},r=await a.fetchJson(this.connection,JSON.stringify(n));if(r.error){if("object"==typeof r.error.data){if("string"==typeof r.error.data.error_message&&"string"==typeof r.error.data.error_type)throw new i.TypedError(r.error.data.error_message,r.error.data.error_type);throw d.parseRpcError(r.error.data)}{const e=`[${r.error.code}] ${r.error.message}: ${r.error.data}`;if("Timeout"===r.error.data||e.includes("Timeout error")||e.includes("query has timed out"))throw new i.TypedError(e,"TimeoutError");throw new i.TypedError(e,d.getErrorTypeFromErrorMessage(r.error.data))}}return r}catch(n){if("TimeoutError"===n.type)return process.env.NEAR_NO_LOGS||console.warn(`Retrying request to ${e} as it has timed out`,t),null;throw n}}),{result:r}=n;if(void 0===r)throw new i.TypedError(`Exceeded 12 attempts for request to ${e}.`,"RetriesExceeded");return r}}t.JsonRpcProvider=JsonRpcProvider},2936:function(e){e.exports=JSON.parse('{"schema":{"BadUTF16":{"name":"BadUTF16","subtypes":[],"props":{}},"BadUTF8":{"name":"BadUTF8","subtypes":[],"props":{}},"BalanceExceeded":{"name":"BalanceExceeded","subtypes":[],"props":{}},"BreakpointTrap":{"name":"BreakpointTrap","subtypes":[],"props":{}},"CacheError":{"name":"CacheError","subtypes":["ReadError","WriteError","DeserializationError","SerializationError"],"props":{}},"CallIndirectOOB":{"name":"CallIndirectOOB","subtypes":[],"props":{}},"CannotAppendActionToJointPromise":{"name":"CannotAppendActionToJointPromise","subtypes":[],"props":{}},"CannotReturnJointPromise":{"name":"CannotReturnJointPromise","subtypes":[],"props":{}},"CodeDoesNotExist":{"name":"CodeDoesNotExist","subtypes":[],"props":{"account_id":""}},"CompilationError":{"name":"CompilationError","subtypes":["CodeDoesNotExist","PrepareError","WasmerCompileError"],"props":{}},"ContractSizeExceeded":{"name":"ContractSizeExceeded","subtypes":[],"props":{"limit":"","size":""}},"Deprecated":{"name":"Deprecated","subtypes":[],"props":{"method_name":""}},"Deserialization":{"name":"Deserialization","subtypes":[],"props":{}},"DeserializationError":{"name":"DeserializationError","subtypes":[],"props":{}},"EmptyMethodName":{"name":"EmptyMethodName","subtypes":[],"props":{}},"FunctionCallError":{"name":"FunctionCallError","subtypes":["CompilationError","LinkError","MethodResolveError","WasmTrap","WasmUnknownError","HostError","EvmError"],"props":{}},"GasExceeded":{"name":"GasExceeded","subtypes":[],"props":{}},"GasInstrumentation":{"name":"GasInstrumentation","subtypes":[],"props":{}},"GasLimitExceeded":{"name":"GasLimitExceeded","subtypes":[],"props":{}},"GenericTrap":{"name":"GenericTrap","subtypes":[],"props":{}},"GuestPanic":{"name":"GuestPanic","subtypes":[],"props":{"panic_msg":""}},"HostError":{"name":"HostError","subtypes":["BadUTF16","BadUTF8","GasExceeded","GasLimitExceeded","BalanceExceeded","EmptyMethodName","GuestPanic","IntegerOverflow","InvalidPromiseIndex","CannotAppendActionToJointPromise","CannotReturnJointPromise","InvalidPromiseResultIndex","InvalidRegisterId","IteratorWasInvalidated","MemoryAccessViolation","InvalidReceiptIndex","InvalidIteratorIndex","InvalidAccountId","InvalidMethodName","InvalidPublicKey","ProhibitedInView","NumberOfLogsExceeded","KeyLengthExceeded","ValueLengthExceeded","TotalLogLengthExceeded","NumberPromisesExceeded","NumberInputDataDependenciesExceeded","ReturnedValueLengthExceeded","ContractSizeExceeded","Deprecated"],"props":{}},"IllegalArithmetic":{"name":"IllegalArithmetic","subtypes":[],"props":{}},"IncorrectCallIndirectSignature":{"name":"IncorrectCallIndirectSignature","subtypes":[],"props":{}},"Instantiate":{"name":"Instantiate","subtypes":[],"props":{}},"IntegerOverflow":{"name":"IntegerOverflow","subtypes":[],"props":{}},"InternalMemoryDeclared":{"name":"InternalMemoryDeclared","subtypes":[],"props":{}},"InvalidAccountId":{"name":"InvalidAccountId","subtypes":[],"props":{"account_id":""}},"InvalidIteratorIndex":{"name":"InvalidIteratorIndex","subtypes":[],"props":{"iterator_index":""}},"InvalidMethodName":{"name":"InvalidMethodName","subtypes":[],"props":{}},"InvalidPromiseIndex":{"name":"InvalidPromiseIndex","subtypes":[],"props":{"promise_idx":""}},"InvalidPromiseResultIndex":{"name":"InvalidPromiseResultIndex","subtypes":[],"props":{"result_idx":""}},"InvalidPublicKey":{"name":"InvalidPublicKey","subtypes":[],"props":{}},"InvalidReceiptIndex":{"name":"InvalidReceiptIndex","subtypes":[],"props":{"receipt_index":""}},"InvalidRegisterId":{"name":"InvalidRegisterId","subtypes":[],"props":{"register_id":""}},"IteratorWasInvalidated":{"name":"IteratorWasInvalidated","subtypes":[],"props":{"iterator_index":""}},"KeyLengthExceeded":{"name":"KeyLengthExceeded","subtypes":[],"props":{"length":"","limit":""}},"LinkError":{"name":"LinkError","subtypes":[],"props":{"msg":""}},"Memory":{"name":"Memory","subtypes":[],"props":{}},"MemoryAccessViolation":{"name":"MemoryAccessViolation","subtypes":[],"props":{}},"MemoryOutOfBounds":{"name":"MemoryOutOfBounds","subtypes":[],"props":{}},"MethodEmptyName":{"name":"MethodEmptyName","subtypes":[],"props":{}},"MethodInvalidSignature":{"name":"MethodInvalidSignature","subtypes":[],"props":{}},"MethodNotFound":{"name":"MethodNotFound","subtypes":[],"props":{}},"MethodResolveError":{"name":"MethodResolveError","subtypes":["MethodEmptyName","MethodUTF8Error","MethodNotFound","MethodInvalidSignature"],"props":{}},"MethodUTF8Error":{"name":"MethodUTF8Error","subtypes":[],"props":{}},"MisalignedAtomicAccess":{"name":"MisalignedAtomicAccess","subtypes":[],"props":{}},"NumberInputDataDependenciesExceeded":{"name":"NumberInputDataDependenciesExceeded","subtypes":[],"props":{"limit":"","number_of_input_data_dependencies":""}},"NumberOfLogsExceeded":{"name":"NumberOfLogsExceeded","subtypes":[],"props":{"limit":""}},"NumberPromisesExceeded":{"name":"NumberPromisesExceeded","subtypes":[],"props":{"limit":"","number_of_promises":""}},"PrepareError":{"name":"PrepareError","subtypes":["Serialization","Deserialization","InternalMemoryDeclared","GasInstrumentation","StackHeightInstrumentation","Instantiate","Memory"],"props":{}},"ProhibitedInView":{"name":"ProhibitedInView","subtypes":[],"props":{"method_name":""}},"ReadError":{"name":"ReadError","subtypes":[],"props":{}},"ReturnedValueLengthExceeded":{"name":"ReturnedValueLengthExceeded","subtypes":[],"props":{"length":"","limit":""}},"Serialization":{"name":"Serialization","subtypes":[],"props":{}},"SerializationError":{"name":"SerializationError","subtypes":[],"props":{"hash":""}},"StackHeightInstrumentation":{"name":"StackHeightInstrumentation","subtypes":[],"props":{}},"StackOverflow":{"name":"StackOverflow","subtypes":[],"props":{}},"TotalLogLengthExceeded":{"name":"TotalLogLengthExceeded","subtypes":[],"props":{"length":"","limit":""}},"Unreachable":{"name":"Unreachable","subtypes":[],"props":{}},"ValueLengthExceeded":{"name":"ValueLengthExceeded","subtypes":[],"props":{"length":"","limit":""}},"WasmTrap":{"name":"WasmTrap","subtypes":["Unreachable","IncorrectCallIndirectSignature","MemoryOutOfBounds","CallIndirectOOB","IllegalArithmetic","MisalignedAtomicAccess","BreakpointTrap","StackOverflow","GenericTrap"],"props":{}},"WasmUnknownError":{"name":"WasmUnknownError","subtypes":[],"props":{}},"WasmerCompileError":{"name":"WasmerCompileError","subtypes":[],"props":{"msg":""}},"WriteError":{"name":"WriteError","subtypes":[],"props":{}},"AccessKeyNotFound":{"name":"AccessKeyNotFound","subtypes":[],"props":{"account_id":"","public_key":""}},"AccountAlreadyExists":{"name":"AccountAlreadyExists","subtypes":[],"props":{"account_id":""}},"AccountDoesNotExist":{"name":"AccountDoesNotExist","subtypes":[],"props":{"account_id":""}},"ActionError":{"name":"ActionError","subtypes":["AccountAlreadyExists","AccountDoesNotExist","CreateAccountOnlyByRegistrar","CreateAccountNotAllowed","ActorNoPermission","DeleteKeyDoesNotExist","AddKeyAlreadyExists","DeleteAccountStaking","LackBalanceForState","TriesToUnstake","TriesToStake","InsufficientStake","FunctionCallError","NewReceiptValidationError","OnlyImplicitAccountCreationAllowed"],"props":{"index":""}},"ActionsValidationError":{"name":"ActionsValidationError","subtypes":["DeleteActionMustBeFinal","TotalPrepaidGasExceeded","TotalNumberOfActionsExceeded","AddKeyMethodNamesNumberOfBytesExceeded","AddKeyMethodNameLengthExceeded","IntegerOverflow","InvalidAccountId","ContractSizeExceeded","FunctionCallMethodNameLengthExceeded","FunctionCallArgumentsLengthExceeded","UnsuitableStakingKey","FunctionCallZeroAttachedGas"],"props":{}},"ActorNoPermission":{"name":"ActorNoPermission","subtypes":[],"props":{"account_id":"","actor_id":""}},"AddKeyAlreadyExists":{"name":"AddKeyAlreadyExists","subtypes":[],"props":{"account_id":"","public_key":""}},"AddKeyMethodNameLengthExceeded":{"name":"AddKeyMethodNameLengthExceeded","subtypes":[],"props":{"length":"","limit":""}},"AddKeyMethodNamesNumberOfBytesExceeded":{"name":"AddKeyMethodNamesNumberOfBytesExceeded","subtypes":[],"props":{"limit":"","total_number_of_bytes":""}},"BalanceMismatchError":{"name":"BalanceMismatchError","subtypes":[],"props":{"final_accounts_balance":"","final_postponed_receipts_balance":"","incoming_receipts_balance":"","incoming_validator_rewards":"","initial_accounts_balance":"","initial_postponed_receipts_balance":"","new_delayed_receipts_balance":"","other_burnt_amount":"","outgoing_receipts_balance":"","processed_delayed_receipts_balance":"","slashed_burnt_amount":"","tx_burnt_amount":""}},"CostOverflow":{"name":"CostOverflow","subtypes":[],"props":{}},"CreateAccountNotAllowed":{"name":"CreateAccountNotAllowed","subtypes":[],"props":{"account_id":"","predecessor_id":""}},"CreateAccountOnlyByRegistrar":{"name":"CreateAccountOnlyByRegistrar","subtypes":[],"props":{"account_id":"","predecessor_id":"","registrar_account_id":""}},"DeleteAccountStaking":{"name":"DeleteAccountStaking","subtypes":[],"props":{"account_id":""}},"DeleteActionMustBeFinal":{"name":"DeleteActionMustBeFinal","subtypes":[],"props":{}},"DeleteKeyDoesNotExist":{"name":"DeleteKeyDoesNotExist","subtypes":[],"props":{"account_id":"","public_key":""}},"DepositWithFunctionCall":{"name":"DepositWithFunctionCall","subtypes":[],"props":{}},"Expired":{"name":"Expired","subtypes":[],"props":{}},"FunctionCallArgumentsLengthExceeded":{"name":"FunctionCallArgumentsLengthExceeded","subtypes":[],"props":{"length":"","limit":""}},"FunctionCallMethodNameLengthExceeded":{"name":"FunctionCallMethodNameLengthExceeded","subtypes":[],"props":{"length":"","limit":""}},"FunctionCallZeroAttachedGas":{"name":"FunctionCallZeroAttachedGas","subtypes":[],"props":{}},"InsufficientStake":{"name":"InsufficientStake","subtypes":[],"props":{"account_id":"","minimum_stake":"","stake":""}},"InvalidAccessKeyError":{"name":"InvalidAccessKeyError","subtypes":["AccessKeyNotFound","ReceiverMismatch","MethodNameMismatch","RequiresFullAccess","NotEnoughAllowance","DepositWithFunctionCall"],"props":{}},"InvalidChain":{"name":"InvalidChain","subtypes":[],"props":{}},"InvalidDataReceiverId":{"name":"InvalidDataReceiverId","subtypes":[],"props":{"account_id":""}},"InvalidNonce":{"name":"InvalidNonce","subtypes":[],"props":{"ak_nonce":"","tx_nonce":""}},"InvalidPredecessorId":{"name":"InvalidPredecessorId","subtypes":[],"props":{"account_id":""}},"InvalidReceiverId":{"name":"InvalidReceiverId","subtypes":[],"props":{"account_id":""}},"InvalidSignature":{"name":"InvalidSignature","subtypes":[],"props":{}},"InvalidSignerId":{"name":"InvalidSignerId","subtypes":[],"props":{"account_id":""}},"InvalidTxError":{"name":"InvalidTxError","subtypes":["InvalidAccessKeyError","InvalidSignerId","SignerDoesNotExist","InvalidNonce","InvalidReceiverId","InvalidSignature","NotEnoughBalance","LackBalanceForState","CostOverflow","InvalidChain","Expired","ActionsValidation"],"props":{}},"LackBalanceForState":{"name":"LackBalanceForState","subtypes":[],"props":{"account_id":"","amount":""}},"MethodNameMismatch":{"name":"MethodNameMismatch","subtypes":[],"props":{"method_name":""}},"NotEnoughAllowance":{"name":"NotEnoughAllowance","subtypes":[],"props":{"account_id":"","allowance":"","cost":"","public_key":""}},"NotEnoughBalance":{"name":"NotEnoughBalance","subtypes":[],"props":{"balance":"","cost":"","signer_id":""}},"OnlyImplicitAccountCreationAllowed":{"name":"OnlyImplicitAccountCreationAllowed","subtypes":[],"props":{"account_id":""}},"ReceiptValidationError":{"name":"ReceiptValidationError","subtypes":["InvalidPredecessorId","InvalidReceiverId","InvalidSignerId","InvalidDataReceiverId","ReturnedValueLengthExceeded","NumberInputDataDependenciesExceeded","ActionsValidation"],"props":{}},"ReceiverMismatch":{"name":"ReceiverMismatch","subtypes":[],"props":{"ak_receiver":"","tx_receiver":""}},"RequiresFullAccess":{"name":"RequiresFullAccess","subtypes":[],"props":{}},"SignerDoesNotExist":{"name":"SignerDoesNotExist","subtypes":[],"props":{"signer_id":""}},"TotalNumberOfActionsExceeded":{"name":"TotalNumberOfActionsExceeded","subtypes":[],"props":{"limit":"","total_number_of_actions":""}},"TotalPrepaidGasExceeded":{"name":"TotalPrepaidGasExceeded","subtypes":[],"props":{"limit":"","total_prepaid_gas":""}},"TriesToStake":{"name":"TriesToStake","subtypes":[],"props":{"account_id":"","balance":"","locked":"","stake":""}},"TriesToUnstake":{"name":"TriesToUnstake","subtypes":[],"props":{"account_id":""}},"TxExecutionError":{"name":"TxExecutionError","subtypes":["ActionError","InvalidTxError"],"props":{}},"UnsuitableStakingKey":{"name":"UnsuitableStakingKey","subtypes":[],"props":{"public_key":""}},"Closed":{"name":"Closed","subtypes":[],"props":{}},"InternalError":{"name":"InternalError","subtypes":[],"props":{}},"ServerError":{"name":"ServerError","subtypes":["TxExecutionError","Timeout","Closed","InternalError"],"props":{}},"Timeout":{"name":"Timeout","subtypes":[],"props":{}}}}')},2937:function(e){e.exports=JSON.parse('{"GasLimitExceeded":"Exceeded the maximum amount of gas allowed to burn per contract","MethodEmptyName":"Method name is empty","WasmerCompileError":"Wasmer compilation error: {{msg}}","GuestPanic":"Smart contract panicked: {{panic_msg}}","Memory":"Error creating Wasm memory","GasExceeded":"Exceeded the prepaid gas","MethodUTF8Error":"Method name is not valid UTF8 string","BadUTF16":"String encoding is bad UTF-16 sequence","WasmTrap":"WebAssembly trap: {{msg}}","GasInstrumentation":"Gas instrumentation failed or contract has denied instructions.","InvalidPromiseIndex":"{{promise_idx}} does not correspond to existing promises","InvalidPromiseResultIndex":"Accessed invalid promise result index: {{result_idx}}","Deserialization":"Error happened while deserializing the module","MethodNotFound":"Contract method is not found","InvalidRegisterId":"Accessed invalid register id: {{register_id}}","InvalidReceiptIndex":"VM Logic returned an invalid receipt index: {{receipt_index}}","EmptyMethodName":"Method name is empty in contract call","CannotReturnJointPromise":"Returning joint promise is currently prohibited","StackHeightInstrumentation":"Stack instrumentation failed","CodeDoesNotExist":"Cannot find contract code for account {{account_id}}","MethodInvalidSignature":"Invalid method signature","IntegerOverflow":"Integer overflow happened during contract execution","MemoryAccessViolation":"MemoryAccessViolation","InvalidIteratorIndex":"Iterator index {{iterator_index}} does not exist","IteratorWasInvalidated":"Iterator {{iterator_index}} was invalidated after its creation by performing a mutable operation on trie","InvalidAccountId":"VM Logic returned an invalid account id","Serialization":"Error happened while serializing the module","CannotAppendActionToJointPromise":"Actions can only be appended to non-joint promise.","InternalMemoryDeclared":"Internal memory declaration has been found in the module","Instantiate":"Error happened during instantiation","ProhibitedInView":"{{method_name}} is not allowed in view calls","InvalidMethodName":"VM Logic returned an invalid method name","BadUTF8":"String encoding is bad UTF-8 sequence","BalanceExceeded":"Exceeded the account balance","LinkError":"Wasm contract link error: {{msg}}","InvalidPublicKey":"VM Logic provided an invalid public key","ActorNoPermission":"Actor {{actor_id}} doesn\'t have permission to account {{account_id}} to complete the action","LackBalanceForState":"The account {{account_id}} wouldn\'t have enough balance to cover storage, required to have {{amount}} yoctoNEAR more","ReceiverMismatch":"Wrong AccessKey used for transaction: transaction is sent to receiver_id={{tx_receiver}}, but is signed with function call access key that restricted to only use with receiver_id={{ak_receiver}}. Either change receiver_id in your transaction or switch to use a FullAccessKey.","CostOverflow":"Transaction gas or balance cost is too high","InvalidSignature":"Transaction is not signed with the given public key","AccessKeyNotFound":"Signer \\"{{account_id}}\\" doesn\'t have access key with the given public_key {{public_key}}","NotEnoughBalance":"Sender {{signer_id}} does not have enough balance {{#formatNear}}{{balance}}{{/formatNear}} for operation costing {{#formatNear}}{{cost}}{{/formatNear}}","NotEnoughAllowance":"Access Key {account_id}:{public_key} does not have enough balance {{#formatNear}}{{allowance}}{{/formatNear}} for transaction costing {{#formatNear}}{{cost}}{{/formatNear}}","Expired":"Transaction has expired","DeleteAccountStaking":"Account {{account_id}} is staking and can not be deleted","SignerDoesNotExist":"Signer {{signer_id}} does not exist","TriesToStake":"Account {{account_id}} tried to stake {{#formatNear}}{{stake}}{{/formatNear}}, but has staked {{#formatNear}}{{locked}}{{/formatNear}} and only has {{#formatNear}}{{balance}}{{/formatNear}}","AddKeyAlreadyExists":"The public key {{public_key}} is already used for an existing access key","InvalidSigner":"Invalid signer account ID {{signer_id}} according to requirements","CreateAccountNotAllowed":"The new account_id {{account_id}} can\'t be created by {{predecessor_id}}","RequiresFullAccess":"The transaction contains more then one action, but it was signed with an access key which allows transaction to apply only one specific action. To apply more then one actions TX must be signed with a full access key","TriesToUnstake":"Account {{account_id}} is not yet staked, but tried to unstake","InvalidNonce":"Transaction nonce {{tx_nonce}} must be larger than nonce of the used access key {{ak_nonce}}","AccountAlreadyExists":"Can\'t create a new account {{account_id}}, because it already exists","InvalidChain":"Transaction parent block hash doesn\'t belong to the current chain","AccountDoesNotExist":"Can\'t complete the action because account {{account_id}} doesn\'t exist","MethodNameMismatch":"Transaction method name {{method_name}} isn\'t allowed by the access key","DeleteAccountHasRent":"Account {{account_id}} can\'t be deleted. It has {{#formatNear}}{{balance}}{{/formatNear}}, which is enough to cover the rent","DeleteAccountHasEnoughBalance":"Account {{account_id}} can\'t be deleted. It has {{#formatNear}}{{balance}}{{/formatNear}}, which is enough to cover it\'s storage","InvalidReceiver":"Invalid receiver account ID {{receiver_id}} according to requirements","DeleteKeyDoesNotExist":"Account {{account_id}} tries to remove an access key that doesn\'t exist","Timeout":"Timeout exceeded","Closed":"Connection closed"}')},2939:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.DEFAULT_FUNCTION_CALL_GAS=void 0;const o=r(n(301));t.DEFAULT_FUNCTION_CALL_GAS=new o.default("30000000000000")},2940:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.Account2FA=t.AccountMultisig=t.MULTISIG_CONFIRM_METHODS=t.MULTISIG_CHANGE_METHODS=t.MULTISIG_DEPOSIT=t.MULTISIG_GAS=t.MULTISIG_ALLOWANCE=t.MULTISIG_STORAGE_KEY=void 0;const o=r(n(301)),s=r(n(357)),a=n(549),i=n(1355),c=n(238),u=n(548),d=n(547);t.MULTISIG_STORAGE_KEY="__multisigRequest",t.MULTISIG_ALLOWANCE=new o.default(i.parseNearAmount("1")),t.MULTISIG_GAS=new o.default("100000000000000"),t.MULTISIG_DEPOSIT=new o.default("0"),t.MULTISIG_CHANGE_METHODS=["add_request","add_request_and_confirm","delete_request","confirm"],t.MULTISIG_CONFIRM_METHODS=["confirm"];const l={[t.MULTISIG_STORAGE_KEY]:null};class AccountMultisig extends a.Account{constructor(e,t,n){super(e,t),this.storage=n.storage,this.onAddRequestResult=n.onAddRequestResult}async signAndSendTransactionWithAccount(e,t){return super.signAndSendTransaction({receiverId:e,actions:t})}signAndSendTransaction(...e){return"string"==typeof e[0]?this._signAndSendTransaction({receiverId:e[0],actions:e[1]}):this._signAndSendTransaction(e[0])}async _signAndSendTransaction({receiverId:e,actions:n}){const{accountId:r}=this,o=Buffer.from(JSON.stringify({request:{receiver_id:e,actions:y(n,r,e)}}));let s;try{s=await super.signAndSendTransaction({receiverId:r,actions:[u.functionCall("add_request_and_confirm",o,t.MULTISIG_GAS,t.MULTISIG_DEPOSIT)]})}catch(t){if(t.toString().includes("Account has too many active requests. Confirm or delete some"))return await this.deleteUnconfirmedRequests(),await this.signAndSendTransaction(e,n);throw t}if(!s.status)throw new Error("Request failed");const a={...s.status};if(!a.SuccessValue||"string"!=typeof a.SuccessValue)throw new Error("Request failed");return this.setRequest({accountId:r,actions:n,requestId:parseInt(Buffer.from(a.SuccessValue,"base64").toString("ascii"),10)}),this.onAddRequestResult&&await this.onAddRequestResult(s),this.deleteUnconfirmedRequests(),s}async deleteUnconfirmedRequests(){const e=await this.getRequestIds(),{requestId:n}=this.getRequest();for(const r of e)if(r!=n)try{await super.signAndSendTransaction({receiverId:this.accountId,actions:[u.functionCall("delete_request",{request_id:r},t.MULTISIG_GAS,t.MULTISIG_DEPOSIT)]})}catch(e){console.warn("Attempt to delete an earlier request before 15 minutes failed. Will try again.")}}async getRequestIds(){return this.viewFunction(this.accountId,"list_request_ids")}getRequest(){return this.storage?JSON.parse(this.storage.getItem(t.MULTISIG_STORAGE_KEY)||"{}"):l[t.MULTISIG_STORAGE_KEY]}setRequest(e){if(this.storage)return this.storage.setItem(t.MULTISIG_STORAGE_KEY,JSON.stringify(e));l[t.MULTISIG_STORAGE_KEY]=e}}t.AccountMultisig=AccountMultisig;t.Account2FA=class Account2FA extends AccountMultisig{constructor(e,t,n){super(e,t,n),this.helperUrl="https://helper.testnet.near.org",this.helperUrl=n.helperUrl||this.helperUrl,this.storage=n.storage,this.sendCode=n.sendCode||this.sendCodeDefault,this.getCode=n.getCode||this.getCodeDefault,this.verifyCode=n.verifyCode||this.verifyCodeDefault,this.onConfirmResult=n.onConfirmResult}async signAndSendTransaction(...e){if("string"==typeof e[0]){return s.default("Account.signAndSendTransaction(receiverId, actions")("use `Account2FA.signAndSendTransaction(SignAndSendTransactionOptions)` instead"),this.__signAndSendTransaction({receiverId:e[0],actions:e[1]})}return this.__signAndSendTransaction(e[0])}async __signAndSendTransaction({receiverId:e,actions:t}){await super.signAndSendTransaction({receiverId:e,actions:t}),await this.sendCode();const n=await this.promptAndVerify();return this.onConfirmResult&&await this.onConfirmResult(n),n}async deployMultisig(e){const{accountId:n}=this,r=(await this.getRecoveryMethods()).data.filter(({kind:e,publicKey:t})=>("phrase"===e||"ledger"===e)&&null!==t).map(e=>e.publicKey),o=(await this.getAccessKeys()).filter(({public_key:e,access_key:{permission:t}})=>"FullAccess"===t&&!r.includes(e)).map(e=>e.public_key).map(p),s=p((await this.postSignedJson("/2fa/getAccessKey",{accountId:n})).publicKey),a=Buffer.from(JSON.stringify({num_confirmations:2})),i=[...o.map(e=>u.deleteKey(e)),...o.map(e=>u.addKey(e,u.functionCallAccessKey(n,t.MULTISIG_CHANGE_METHODS,null))),u.addKey(s,u.functionCallAccessKey(n,t.MULTISIG_CONFIRM_METHODS,null)),u.deployContract(e)];return"11111111111111111111111111111111"===(await this.state()).code_hash&&i.push(u.functionCall("new",a,t.MULTISIG_GAS,t.MULTISIG_DEPOSIT)),console.log("deploying multisig contract for",n),await super.signAndSendTransactionWithAccount(n,i)}async disable(e){const{accountId:t}=this,n=(await this.getAccessKeys()).filter(({access_key:e})=>"FullAccess"!==e.permission).filter(({access_key:e})=>{const n=e.permission.FunctionCall;return n.receiver_id===t&&4===n.method_names.length&&n.method_names.includes("add_request_and_confirm")}),r=c.PublicKey.from((await this.postSignedJson("/2fa/getAccessKey",{accountId:t})).publicKey),o=[u.deleteKey(r),...n.map(({public_key:e})=>u.deleteKey(c.PublicKey.from(e))),...n.map(({public_key:e})=>u.addKey(c.PublicKey.from(e),null)),u.deployContract(e)];return console.log("disabling 2fa for",t),await this.signAndSendTransaction({receiverId:t,actions:o})}async sendCodeDefault(){const{accountId:e}=this,{requestId:t}=this.getRequest(),n=await this.get2faMethod();return await this.postSignedJson("/2fa/send",{accountId:e,method:n,requestId:t}),t}async getCodeDefault(e){throw new Error('There is no getCode callback provided. Please provide your own in AccountMultisig constructor options. It has a parameter method where method.kind is "email" or "phone".')}async promptAndVerify(){const e=await this.get2faMethod(),t=await this.getCode(e);try{return await this.verifyCode(t)}catch(e){if(console.warn("Error validating security code:",e),e.toString().includes("invalid 2fa code provided")||e.toString().includes("2fa code not valid"))return await this.promptAndVerify();throw e}}async verifyCodeDefault(e){const{accountId:t}=this,n=this.getRequest();if(!n)throw new Error("no request pending");const{requestId:r}=n;return await this.postSignedJson("/2fa/verify",{accountId:t,securityCode:e,requestId:r})}async getRecoveryMethods(){const{accountId:e}=this;return{accountId:e,data:await this.postSignedJson("/account/recoveryMethods",{accountId:e})}}async get2faMethod(){let{data:e}=await this.getRecoveryMethods();if(e&&e.length&&(e=e.find(e=>0===e.kind.indexOf("2fa-"))),!e)return null;const{kind:t,detail:n}=e;return{kind:t,detail:n}}async signatureFor(){const{accountId:e}=this,t=(await this.connection.provider.block({finality:"final"})).header.height.toString(),n=await this.connection.signer.signMessage(Buffer.from(t),e,this.connection.networkId);return{blockNumber:t,blockNumberSignature:Buffer.from(n.signature).toString("base64")}}async postSignedJson(e,t){return await d.fetchJson(this.helperUrl+e,JSON.stringify({...t,...await this.signatureFor()}))}};const p=e=>c.PublicKey.from(e),y=(e,n,r)=>e.map(e=>{const o=e.enum,{gas:s,publicKey:a,methodName:i,args:c,deposit:u,accessKey:d,code:l}=e[o],p={type:o[0].toUpperCase()+o.substr(1),gas:s&&s.toString()||void 0,public_key:a&&(y=a,y.toString().replace("ed25519:",""))||void 0,method_name:i,args:c&&Buffer.from(c).toString("base64")||void 0,code:l&&Buffer.from(l).toString("base64")||void 0,amount:u&&u.toString()||void 0,deposit:u&&u.toString()||"0",permission:void 0};var y;if(d&&(r===n&&"fullAccess"!==d.permission.enum&&(p.permission={receiver_id:n,allowance:t.MULTISIG_ALLOWANCE.toString(),method_names:t.MULTISIG_CHANGE_METHODS}),"functionCall"===d.permission.enum)){const{receiverId:e,methodNames:t,allowance:n}=d.permission.functionCall;p.permission={receiver_id:e,allowance:n&&n.toString()||void 0,method_names:t}}return p})},2942:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.connect=void 0;const r=n(1360);t.connect=async function(e){return new r.Near(e)}},446:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ErrorContext=t.TypedError=t.getTransactionLastResult=t.FinalExecutionStatusBasic=t.JsonRpcProvider=t.Provider=void 0;const r=n(1353);Object.defineProperty(t,"Provider",{enumerable:!0,get:function(){return r.Provider}}),Object.defineProperty(t,"getTransactionLastResult",{enumerable:!0,get:function(){return r.getTransactionLastResult}}),Object.defineProperty(t,"FinalExecutionStatusBasic",{enumerable:!0,get:function(){return r.FinalExecutionStatusBasic}});const o=n(2928);Object.defineProperty(t,"JsonRpcProvider",{enumerable:!0,get:function(){return o.JsonRpcProvider}}),Object.defineProperty(t,"TypedError",{enumerable:!0,get:function(){return o.TypedError}}),Object.defineProperty(t,"ErrorContext",{enumerable:!0,get:function(){return o.ErrorContext}})},546:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.KeyStore=void 0;t.KeyStore=class KeyStore{}},549:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.Account=void 0;const o=r(n(301)),s=r(n(357)),a=n(548),i=n(446),c=n(356),u=n(238),d=n(358),l=n(797),p=n(2939),y=r(n(796));function h(e){return JSON.parse(Buffer.from(e).toString())}function m(e){return Buffer.from(JSON.stringify(e))}class Account{constructor(e,t){this.accessKeyByPublicKeyCache={},this.connection=e,this.accountId=t}get ready(){return s.default("Account.ready()")("not needed anymore, always ready"),Promise.resolve()}async fetchState(){s.default("Account.fetchState()")("use `Account.state()` instead")}async state(){return this.connection.provider.query({request_type:"view_account",account_id:this.accountId,finality:"optimistic"})}printLogsAndFailures(e,t){if(!process.env.NEAR_NO_LOGS)for(const n of t)console.log(`Receipt${n.receiptIds.length>1?"s":""}: ${n.receiptIds.join(", ")}`),this.printLogs(e,n.logs,"\t"),n.failure&&console.warn(`\tFailure [${e}]: ${n.failure}`)}printLogs(e,t,n=""){if(!process.env.NEAR_NO_LOGS)for(const r of t)console.log(`${n}Log [${e}]: ${r}`)}async signTransaction(e,t){const n=await this.findAccessKey(e,t);if(!n)throw new i.TypedError(`Can not sign transactions for account ${this.accountId} on network ${this.connection.networkId}, no matching key pair found in ${this.connection.signer}.`,"KeyNotFound");const{accessKey:r}=n,o=(await this.connection.provider.block({finality:"final"})).header.hash,s=++r.nonce;return await a.signTransaction(e,s,t,c.baseDecode(o),this.connection.signer,this.accountId,this.connection.networkId)}signAndSendTransaction(...e){return"string"==typeof e[0]?this.signAndSendTransactionV1(e[0],e[1]):this.signAndSendTransactionV2(e[0])}signAndSendTransactionV1(e,t){return s.default("Account.signAndSendTransaction(receiverId, actions")("use `Account.signAndSendTransaction(SignAndSendTransactionOptions)` instead"),this.signAndSendTransactionV2({receiverId:e,actions:t})}async signAndSendTransactionV2({receiverId:e,actions:t,returnError:n}){let r,o;const s=await y.default(500,12,1.5,async()=>{[r,o]=await this.signTransaction(e,t);const n=o.transaction.publicKey;try{return await this.connection.provider.sendTransaction(o)}catch(t){if("InvalidNonce"===t.type)return d.logWarning(`Retrying transaction ${e}:${c.baseEncode(r)} with new nonce.`),delete this.accessKeyByPublicKeyCache[n.toString()],null;if("Expired"===t.type)return d.logWarning(`Retrying transaction ${e}:${c.baseEncode(r)} due to expired block hash`),null;throw t.context=new i.ErrorContext(c.baseEncode(r)),t}});if(!s)throw new i.TypedError("nonce retries exceeded for transaction. This usually means there are too many parallel requests with the same access key.","RetriesExceeded");const a=[s.transaction_outcome,...s.receipts_outcome].reduce((e,t)=>t.outcome.logs.length||"object"==typeof t.outcome.status&&"object"==typeof t.outcome.status.Failure?e.concat({receiptIds:t.outcome.receipt_ids,logs:t.outcome.logs,failure:void 0!==t.outcome.status.Failure?l.parseRpcError(t.outcome.status.Failure):null}):e,[]);if(this.printLogsAndFailures(o.transaction.receiverId,a),!n&&"object"==typeof s.status&&"object"==typeof s.status.Failure)throw s.status.Failure.error_message&&s.status.Failure.error_type?new i.TypedError(`Transaction ${s.transaction_outcome.id} failed. ${s.status.Failure.error_message}`,s.status.Failure.error_type):l.parseResultError(s);return s}async findAccessKey(e,t){const n=await this.connection.signer.getPublicKey(this.accountId,this.connection.networkId);if(!n)return null;const r=this.accessKeyByPublicKeyCache[n.toString()];if(void 0!==r)return{publicKey:n,accessKey:r};try{const e=await this.connection.provider.query({request_type:"view_access_key",account_id:this.accountId,public_key:n.toString(),finality:"optimistic"});return this.accessKeyByPublicKeyCache[n.toString()]?{publicKey:n,accessKey:this.accessKeyByPublicKeyCache[n.toString()]}:(this.accessKeyByPublicKeyCache[n.toString()]=e,{publicKey:n,accessKey:e})}catch(e){if("AccessKeyDoesNotExist"==e.type)return null;throw e}}async createAndDeployContract(e,t,n,r){const o=a.fullAccessKey();await this.signAndSendTransaction({receiverId:e,actions:[a.createAccount(),a.transfer(r),a.addKey(u.PublicKey.from(t),o),a.deployContract(n)]});return new Account(this.connection,e)}async sendMoney(e,t){return this.signAndSendTransaction({receiverId:e,actions:[a.transfer(t)]})}async createAccount(e,t,n){const r=a.fullAccessKey();return this.signAndSendTransaction({receiverId:e,actions:[a.createAccount(),a.transfer(n),a.addKey(u.PublicKey.from(t),r)]})}async deleteAccount(e){return this.signAndSendTransaction({receiverId:this.accountId,actions:[a.deleteAccount(e)]})}async deployContract(e){return this.signAndSendTransaction({receiverId:this.accountId,actions:[a.deployContract(e)]})}async functionCall(...e){return"string"==typeof e[0]?this.functionCallV1(e[0],e[1],e[2],e[3],e[4]):this.functionCallV2(e[0])}functionCallV1(e,t,n,r,o){return s.default("Account.functionCall(contractId, methodName, args, gas, amount)")("use `Account.functionCall(FunctionCallOptions)` instead"),n=n||{},this.validateArgs(n),this.signAndSendTransaction({receiverId:e,actions:[a.functionCall(t,n,r||p.DEFAULT_FUNCTION_CALL_GAS,o)]})}functionCallV2({contractId:e,methodName:t,args:n={},gas:r=p.DEFAULT_FUNCTION_CALL_GAS,attachedDeposit:o,walletMeta:s,walletCallbackUrl:i,stringify:c}){this.validateArgs(n);const u=void 0===c?a.stringifyJsonOrBytes:c;return this.signAndSendTransaction({receiverId:e,actions:[a.functionCall(t,n,r,o,u)],walletMeta:s,walletCallbackUrl:i})}async addKey(e,t,n,r){let o;return n||(n=[]),Array.isArray(n)||(n=[n]),o=t?a.functionCallAccessKey(t,n,r):a.fullAccessKey(),this.signAndSendTransaction({receiverId:this.accountId,actions:[a.addKey(u.PublicKey.from(e),o)]})}async deleteKey(e){return this.signAndSendTransaction({receiverId:this.accountId,actions:[a.deleteKey(u.PublicKey.from(e))]})}async stake(e,t){return this.signAndSendTransaction({receiverId:this.accountId,actions:[a.stake(t,u.PublicKey.from(e))]})}validateArgs(e){if(!(void 0!==e.byteLength&&e.byteLength===e.length)&&(Array.isArray(e)||"object"!=typeof e))throw new d.PositionalArgsError}async viewFunction(e,t,n={},{parse:r=h,stringify:o=m}={}){this.validateArgs(n);const s=o(n).toString("base64"),a=await this.connection.provider.query({request_type:"call_function",account_id:e,method_name:t,args_base64:s,finality:"optimistic"});return a.logs&&this.printLogs(e,a.logs),a.result&&a.result.length>0&&r(Buffer.from(a.result))}async viewState(e,t={finality:"optimistic"}){const{values:n}=await this.connection.provider.query({request_type:"view_state",...t,account_id:this.accountId,prefix_base64:Buffer.from(e).toString("base64")});return n.map(({key:e,value:t})=>({key:Buffer.from(e,"base64"),value:Buffer.from(t,"base64")}))}async getAccessKeys(){const e=await this.connection.provider.query({request_type:"view_access_key_list",account_id:this.accountId,finality:"optimistic"});return Array.isArray(e)?e:e.keys}async getAccountDetails(){return{authorizedApps:(await this.getAccessKeys()).filter(e=>"FullAccess"!==e.access_key.permission).map(e=>{const t=e.access_key.permission;return{contractId:t.FunctionCall.receiver_id,amount:t.FunctionCall.allowance,publicKey:e.public_key}})}}async getAccountBalance(){const e=await this.connection.provider.experimental_protocolConfig({finality:"final"}),t=await this.state(),n=new o.default(e.runtime_config.storage_amount_per_byte),r=new o.default(t.storage_usage).mul(n),s=new o.default(t.locked),a=new o.default(t.amount).add(s),i=a.sub(o.default.max(s,r));return{total:a.toString(),stateStaked:r.toString(),staked:s.toString(),available:i.toString()}}}t.Account=Account}}]);