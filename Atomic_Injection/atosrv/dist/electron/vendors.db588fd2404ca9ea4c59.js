(window.webpackJsonp=window.webpackJsonp||[]).push([[308],{4269:function(e,t,i){"use strict";i.r(t);var s=i(550),r=i(62),n=i.n(r),a=i(913),o=i(16),c=i.n(o),h=i(35),d=i.n(h),m=i(9),l=i(22),u=i(469),f=i(896);class LUNACoin extends(Object(u.g)(m.n)){constructor({alias:e,feeData:t,explorers:i,txWebUrl:s,socket:r,isTestnet:a}){super({alias:e,name:"Terra",ticker:"LUNA",decimal:6,derivation:"m/44'/330'/0'/0/0",unspendableBalance:"0",txWebUrl:s,explorers:i,socket:r,feeData:t,id:"LUNA",denom:"uluna"}),this.BigNumber=n.a,this.isTestnet=a,this.plugins=[new f.a],this.gasLimit=t.gasLimit,this.gasLimitCoefficient=t.gasLimitCoefficient,this.gasPriceCoefficient=t.gasPriceCoefficient,this.defaultGasPrice=t.defaultGasPrice,this.defaultMaxGasPrice=t.defaultMaxGasPrice,this.bannedTokens=[],this.resendTimeout=t.resendTimeout,this.feeDenom="uluna",this.tokenGasLimit=t.tokenGasLimit,this.tokenGasPriceCoefficient=t.tokenGasPriceCoefficient,this.tokenGasLimitCoefficient=t.tokenGasLimitCoefficient,this.tokenFeeData={gasLimit:this.tokenGasLimit,gasPriceCoefficien:this.tokenGasPriceCoefficient,gasLimitCoefficient:this.tokenGasLimitCoefficient};const o=i.find(({className:e})=>"TerraLCDExplorer"===e);this.initProvider(o),this.fields.paymentId=!0,this.tokens={},this.nonce=0,this.estimateGasThrottled=d.a.throttle(this.estimateGas,800),this.eventEmmiter.on(this.ticker+"::confirmed-socket-tx",(e,t,i)=>{this.bus.$emit("socket::tx::confirmed",{id:e,ticker:i})})}get instance(){if(!this.coreLibrary){const e=this.config.explorers.find(({className:e})=>"TerraLCDExplorer"===e);this.initProvider(e)}return{id:this.id,ticker:this.ticker,name:this.name,decimal:this.decimal,address:this.address,parent:this.parent,feeDenom:()=>this.feeDenom,BN:c(),toCurrencyUnit:e=>this.toCurrencyUnit(e),toMinimalUnit:e=>this.toMinimalUnit(e),coreLibrary:this.coreLibrary,alias:this.alias,feeCoefficient:this.coefficient,feeDefault:this.feeData&&this.feeData.fee,gasLimit:this.gasLimit,getTickerFromDenom:e=>this.getTickerFromDenom(e),isTestnet:()=>this.isTestnet,denom:this.denom}}isFeeDynamic(){return!0}getTickerFromDenom(e){if(!e)return"";if("u"===e[0]){const t=e.slice(1);return t.length>3?t==="LUNA".toLowerCase()?"LUNA":t.toUpperCase():t.slice(0,2).toUpperCase()+"T"}return e}initProvider(e){try{this.coreLibrary=new s.LCDClient({chainID:e.chainID,URL:e.baseUrl})}catch(t){l.a.error({instance:this,error:t}),setTimeout(()=>this.initProvider(e),1e4)}}async loadWallet(e,t){try{if(!Object(a.validateMnemonic)(t))throw new Error(this.ticker+" invalid mnemonic");const e=new s.MnemonicKey({mnemonic:t});this.privateKey=e.privateKey.toString("hex"),this.address=e.accAddress,this.publicKey=e.publicKey.key}catch(e){throw new Error(this.ticker+" can't get the wallet!!!")}return this}getAddress(){return this.privateKey?this.address:new Error(this.ticker+" private key is empty!!!")}validateAddress(e){return s.AccAddress.validate(e)}getGasPrice(e=!1,t=!1){const i=this.defaultGasPrice[this.feeDenom];let s=new this.BigNumber(i);return s=e?s:s.plus(t?this.tokenGasPriceCoefficient:this.gasPriceCoefficient),s=s.times(10**9).dividedBy(10**6).integerValue(this.BigNumber.ROUND_CEIL).times(10**9),new this.BN(s.toFixed())}getMsgSend(e,t,i,r=this.denom){return new s.MsgSend(t,i,{[r]:e})}async getFee({userGasPrice:e,gasLimit:t,multiplier:i,contract:s,denom:r,address:n="terra1y6z0mzhlgkxr6q0xrykqalce3vhnvujurv96e6",sendAmount:a,custom:o}={}){if(!this.validateAddress(n))throw new Error(this.ticker+" invalid address");const c=t||await this.estimateGasThrottled(a,n,s,r,o);if(!c)throw new Error(this.ticker+" invalid sendAmount");const h=this.BigNumber(10**9).dividedBy(10**6),d=new this.BigNumber(this.BigNumber(e).isGreaterThan(0)?e:await this.getGasPrice(!0)).dividedBy(10**9).dividedBy(h).plus(i||(r&&r!==this.denom||s?this.tokenGasPriceCoefficient:this.gasPriceCoefficient)).times(h),m=this.BigNumber(c).times(d).dividedToIntegerBy(h);return new this.BN(m.toFixed())}async availableBalance(e){return this.BigNumber(this.balance).isGreaterThan(0)?this.toCurrencyUnit(this.BigNumber(this.balance).minus(e||0).toFixed()):"0"}async createTransaction({address:e,amount:t,userGasPrice:i,gasLimit:r,multiplier:n,msg:a,memo:o,contract:c,denom:h=this.denom}){const d=a||this.getMsgSend(t,this.address,e,this.denom),m=this.restoreTerraWalletFromPrivateKey({privateKey:this.privateKey}),l=this.BigNumber(r).isGreaterThan(0)?r:await this.estimateGasByMsg(d,c||h&&this.denom!==h,o),u=await this.getFee({userGasPrice:i,gasLimit:l,multiplier:n,denom:h,contract:c,custom:o}),f=new s.Fee(Number(l),{[this.feeDenom]:u.toString()});return m.createAndSignTx({msgs:[d],fee:f,feeDenoms:[this.feeDenom],memo:o})}restoreTerraWalletFromPrivateKey(e){try{const t=Buffer.from(e.privateKey,"hex"),i=Object(a.validateMnemonic)(e.privateKey)?new s.MnemonicKey({mnemonic:e.privateKey}):new s.RawKey(t);return this.coreLibrary.wallet(i)}catch(e){throw new Error(this.ticker+" private key is invalid or empty!!!")}}async getNonce(){try{const e=await this.coreLibrary.auth.accountInfo(this.address);this.nonce=e.getSequenceNumber()}catch(e){console.error(this.ticker+" failed to get nonce")}return this.nonce}async estimateGasByMsg(e,t,i){const s=await this.getNonce(),r=await this.getProvider("estimate_fee").estimateFee(s,e,i).catch(e=>(console.error(e),null)),n=t?this.tokenGasLimit:this.gasLimit;return new this.BigNumber((null==r?void 0:r.gas_limit)||n).plus(t?this.tokenGasLimitCoefficient:this.gasLimitCoefficient).integerValue(this.BigNumber.ROUND_CEIL).toFixed()}async estimateGas(e,t,i=null,s=this.denom,r){if(!this.validateAddress(t))throw new Error(this.ticker+" invalid address");if(!this.address)throw new Error(this.ticker+" address not found");const n=i?this.createSendTokenContract(i,this.address,t,e):this.getMsgSend(e,this.address,t,s);return this.estimateGasByMsg(n,i||s&&this.denom!==s,r)}gasPrice(){return this.getGasPrice()}setPrivateKey(...e){super.setPrivateKey(...e),this.getNonce()}getGasRange(e="send"){return this.feeData[e]}async getInfo(){if(!this.address)throw new Error(this.ticker+" address not found");try{const e=await this.getProvider("balance").getBalance(this.address,!1,this.denom);if(!e)throw new Error(this.ticker+" can't get balance");this.balance=e}catch(e){console.error(e)}return{balance:this.balance}}async checkTransaction(e){super.checkTransaction({feeTicker:this.getTickerFromDenom(this.feeDenom),...e})}async getBalance(){return(await this.getInfo()).balance}}t.default=LUNACoin}}]);