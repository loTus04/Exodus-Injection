(window.webpackJsonp=window.webpackJsonp||[]).push([[48],{72:function(e,t,r){"use strict";r.r(t),r.d(t,"Account",(function(){return Account})),r.d(t,"Authorized",(function(){return Authorized})),r.d(t,"BLOCKHASH_CACHE_TIMEOUT_MS",(function(){return oe})),r.d(t,"BPF_LOADER_DEPRECATED_PROGRAM_ID",(function(){return B})),r.d(t,"BPF_LOADER_PROGRAM_ID",(function(){return Q})),r.d(t,"BpfLoader",(function(){return BpfLoader})),r.d(t,"Connection",(function(){return Connection})),r.d(t,"Enum",(function(){return Enum})),r.d(t,"EpochSchedule",(function(){return EpochSchedule})),r.d(t,"FeeCalculatorLayout",(function(){return Y})),r.d(t,"Keypair",(function(){return Keypair})),r.d(t,"LAMPORTS_PER_SOL",(function(){return Lt})),r.d(t,"Loader",(function(){return Loader})),r.d(t,"Lockup",(function(){return Lockup})),r.d(t,"MAX_SEED_LENGTH",(function(){return _})),r.d(t,"Message",(function(){return Message})),r.d(t,"NONCE_ACCOUNT_LENGTH",(function(){return J})),r.d(t,"NonceAccount",(function(){return NonceAccount})),r.d(t,"PACKET_DATA_SIZE",(function(){return x})),r.d(t,"PublicKey",(function(){return PublicKey})),r.d(t,"SOLANA_SCHEMA",(function(){return j})),r.d(t,"STAKE_CONFIG_ID",(function(){return It})),r.d(t,"STAKE_INSTRUCTION_LAYOUTS",(function(){return At})),r.d(t,"SYSTEM_INSTRUCTION_LAYOUTS",(function(){return Z})),r.d(t,"SYSVAR_CLOCK_PUBKEY",(function(){return N})),r.d(t,"SYSVAR_INSTRUCTIONS_PUBKEY",(function(){return D})),r.d(t,"SYSVAR_RECENT_BLOCKHASHES_PUBKEY",(function(){return L})),r.d(t,"SYSVAR_RENT_PUBKEY",(function(){return q})),r.d(t,"SYSVAR_REWARDS_PUBKEY",(function(){return U})),r.d(t,"SYSVAR_STAKE_HISTORY_PUBKEY",(function(){return M})),r.d(t,"Secp256k1Program",(function(){return Secp256k1Program})),r.d(t,"SendTransactionError",(function(){return SendTransactionError})),r.d(t,"StakeAuthorizationLayout",(function(){return Et})),r.d(t,"StakeInstruction",(function(){return StakeInstruction})),r.d(t,"StakeProgram",(function(){return StakeProgram})),r.d(t,"Struct",(function(){return Struct})),r.d(t,"SystemInstruction",(function(){return SystemInstruction})),r.d(t,"SystemProgram",(function(){return SystemProgram})),r.d(t,"Transaction",(function(){return Transaction})),r.d(t,"TransactionInstruction",(function(){return TransactionInstruction})),r.d(t,"VALIDATOR_INFO_KEY",(function(){return Tt})),r.d(t,"VOTE_PROGRAM_ID",(function(){return Wt})),r.d(t,"ValidatorInfo",(function(){return ValidatorInfo})),r.d(t,"VoteAccount",(function(){return VoteAccount})),r.d(t,"clusterApiUrl",(function(){return Nt})),r.d(t,"sendAndConfirmRawTransaction",(function(){return Rt})),r.d(t,"sendAndConfirmTransaction",(function(){return V}));var n=r(18),s=r.n(n),i=r(79),o=r.n(i),c=r(6),a=r(652),u=r.n(a),l=r(42),b=r.n(l),d=r(884),h=r(377),p=r(12),g=r(0),m=r(1630),y=r(464),f=r.n(y),k=r(1631),O=r.n(k),S=r(176);const w=e=>c.Buffer.isBuffer(e)?e:e instanceof Uint8Array?c.Buffer.from(e.buffer,e.byteOffset,e.byteLength):c.Buffer.from(e);class Struct{constructor(e){Object.assign(this,e)}encode(){return c.Buffer.from(Object(h.serialize)(j,this))}static decode(e){return Object(h.deserialize)(j,this,e)}static decodeUnchecked(e){return Object(h.deserializeUnchecked)(j,this,e)}}class Enum extends Struct{constructor(e){if(super(e),s()(this,"enum",""),1!==Object.keys(e).length)throw new Error("Enum can only take single value");Object.keys(e).map(e=>{this.enum=e})}}const j=new Map,_=32;class PublicKey extends Struct{constructor(e){if(super({}),s()(this,"_bn",void 0),function(e){return void 0!==e._bn}(e))this._bn=e._bn;else{if("string"==typeof e){const t=b.a.decode(e);if(32!=t.length)throw new Error("Invalid public key input");this._bn=new u.a(t)}else this._bn=new u.a(e);if(this._bn.byteLength()>32)throw new Error("Invalid public key input")}}equals(e){return this._bn.eq(e._bn)}toBase58(){return b.a.encode(this.toBytes())}toBytes(){return this.toBuffer()}toBuffer(){const e=this._bn.toArrayLike(c.Buffer);if(32===e.length)return e;const t=c.Buffer.alloc(32);return e.copy(t,32-e.length),t}toString(){return this.toBase58()}static async createWithSeed(e,t,r){const n=c.Buffer.concat([e.toBuffer(),c.Buffer.from(t),r.toBuffer()]),s=await Object(d.sha256)(new Uint8Array(n));return new PublicKey(c.Buffer.from(s,"hex"))}static async createProgramAddress(e,t){let r=c.Buffer.alloc(0);e.forEach((function(e){if(e.length>_)throw new TypeError("Max seed length exceeded");r=c.Buffer.concat([r,w(e)])})),r=c.Buffer.concat([r,t.toBuffer(),c.Buffer.from("ProgramDerivedAddress")]);let n=await Object(d.sha256)(new Uint8Array(r)),s=new u.a(n,16).toArray(void 0,32);if(I(s))throw new Error("Invalid seeds, address must fall off the curve");return new PublicKey(s)}static async findProgramAddress(e,t){let r,n=255;for(;0!=n;){try{const s=e.concat(c.Buffer.from([n]));r=await this.createProgramAddress(s,t)}catch(e){if(e instanceof TypeError)throw e;n--;continue}return[r,n]}throw new Error("Unable to find a viable program address nonce")}static isOnCurve(e){return 1==I(e)}}s()(PublicKey,"default",new PublicKey("11111111111111111111111111111111")),j.set(PublicKey,{kind:"struct",fields:[["_bn","u256"]]});let P=o.a.lowlevel;function I(e){var t=[P.gf(),P.gf(),P.gf(),P.gf()],r=P.gf(),n=P.gf(),s=P.gf(),i=P.gf(),o=P.gf(),c=P.gf(),a=P.gf();return P.set25519(t[2],A),P.unpack25519(t[1],e),P.S(s,t[1]),P.M(i,s,P.D),P.Z(s,s,t[2]),P.A(i,t[2],i),P.S(o,i),P.S(c,o),P.M(a,c,o),P.M(r,a,s),P.M(r,r,i),P.pow2523(r,r),P.M(r,r,s),P.M(r,r,i),P.M(r,r,i),P.M(t[0],r,i),P.S(n,t[0]),P.M(n,n,i),v(n,s)&&P.M(t[0],t[0],E),P.S(n,t[0]),P.M(n,n,i),v(n,s)?0:1}let A=P.gf([1]),E=P.gf([41136,18958,6951,50414,58488,44335,6150,12099,55207,15867,153,11085,57099,20417,9344,11139]);function v(e,t){var r=new Uint8Array(32),n=new Uint8Array(32);return P.pack25519(r,e),P.pack25519(n,t),P.crypto_verify_32(r,0,n,0)}class Account{constructor(e){s()(this,"_keypair",void 0),this._keypair=e?i.sign.keyPair.fromSecretKey(w(e)):i.sign.keyPair()}get publicKey(){return new PublicKey(this._keypair.publicKey)}get secretKey(){return w(this._keypair.secretKey)}}const B=new PublicKey("BPFLoader1111111111111111111111111111111111"),C=(e="publicKey")=>p.blob(32,e),T=(e="string")=>{const t=p.struct([p.u32("length"),p.u32("lengthPadding"),p.blob(p.offset(p.u32(),-8),"chars")],e),r=t.decode.bind(t),n=t.encode.bind(t);return t.decode=(e,t)=>r(e,t).chars.toString("utf8"),t.encode=(e,t,r)=>{const s={chars:c.Buffer.from(e,"utf8")};return n(s,t,r)},t.alloc=e=>p.u32().span+p.u32().span+c.Buffer.from(e,"utf8").length,t};function K(e){let t=0,r=0;for(;;){let n=e.shift();if(t|=(127&n)<<7*r,r+=1,0==(128&n))break}return t}function W(e,t){let r=t;for(;;){let t=127&r;if(r>>=7,0==r){e.push(t);break}t|=128,e.push(t)}}class Message{constructor(e){s()(this,"header",void 0),s()(this,"accountKeys",void 0),s()(this,"recentBlockhash",void 0),s()(this,"instructions",void 0),this.header=e.header,this.accountKeys=e.accountKeys.map(e=>new PublicKey(e)),this.recentBlockhash=e.recentBlockhash,this.instructions=e.instructions}isAccountWritable(e){return e<this.header.numRequiredSignatures-this.header.numReadonlySignedAccounts||e>=this.header.numRequiredSignatures&&e<this.accountKeys.length-this.header.numReadonlyUnsignedAccounts}serialize(){const e=this.accountKeys.length;let t=[];W(t,e);const r=this.instructions.map(e=>{const{accounts:t,programIdIndex:r}=e,n=b.a.decode(e.data);let s=[];W(s,t.length);let i=[];return W(i,n.length),{programIdIndex:r,keyIndicesCount:c.Buffer.from(s),keyIndices:c.Buffer.from(t),dataLength:c.Buffer.from(i),data:n}});let n=[];W(n,r.length);let s=c.Buffer.alloc(x);c.Buffer.from(n).copy(s);let i=n.length;r.forEach(e=>{const t=p.struct([p.u8("programIdIndex"),p.blob(e.keyIndicesCount.length,"keyIndicesCount"),p.seq(p.u8("keyIndex"),e.keyIndices.length,"keyIndices"),p.blob(e.dataLength.length,"dataLength"),p.seq(p.u8("userdatum"),e.data.length,"data")]).encode(e,s,i);i+=t}),s=s.slice(0,i);const o=p.struct([p.blob(1,"numRequiredSignatures"),p.blob(1,"numReadonlySignedAccounts"),p.blob(1,"numReadonlyUnsignedAccounts"),p.blob(t.length,"keyCount"),p.seq(C("key"),e,"keys"),C("recentBlockhash")]),a={numRequiredSignatures:c.Buffer.from([this.header.numRequiredSignatures]),numReadonlySignedAccounts:c.Buffer.from([this.header.numReadonlySignedAccounts]),numReadonlyUnsignedAccounts:c.Buffer.from([this.header.numReadonlyUnsignedAccounts]),keyCount:c.Buffer.from(t),keys:this.accountKeys.map(e=>w(e.toBytes())),recentBlockhash:b.a.decode(this.recentBlockhash)};let u=c.Buffer.alloc(2048);const l=o.encode(a,u);return s.copy(u,l),u.slice(0,l+s.length)}static from(e){let t=[...e];const r=t.shift(),n=t.shift(),s=t.shift(),i=K(t);let o=[];for(let e=0;e<i;e++){const e=t.slice(0,32);t=t.slice(32),o.push(b.a.encode(c.Buffer.from(e)))}const a=t.slice(0,32);t=t.slice(32);const u=K(t);let l=[];for(let e=0;e<u;e++){const e=t.shift(),r=K(t),n=t.slice(0,r);t=t.slice(r);const s=K(t),i=t.slice(0,s),o=b.a.encode(c.Buffer.from(i));t=t.slice(s),l.push({programIdIndex:e,accounts:n,data:o})}const d={header:{numRequiredSignatures:r,numReadonlySignedAccounts:n,numReadonlyUnsignedAccounts:s},recentBlockhash:b.a.encode(c.Buffer.from(a)),accountKeys:o,instructions:l};return new Message(d)}}function z(e,t){if(!e)throw new Error(t||"Assertion failed")}const R=c.Buffer.alloc(64).fill(0),x=1232;class TransactionInstruction{constructor(e){s()(this,"keys",void 0),s()(this,"programId",void 0),s()(this,"data",c.Buffer.alloc(0)),this.programId=e.programId,this.keys=e.keys,e.data&&(this.data=e.data)}}class Transaction{get signature(){return this.signatures.length>0?this.signatures[0].signature:null}constructor(e){s()(this,"signatures",[]),s()(this,"feePayer",void 0),s()(this,"instructions",[]),s()(this,"recentBlockhash",void 0),s()(this,"nonceInfo",void 0),e&&Object.assign(this,e)}add(...e){if(0===e.length)throw new Error("No instructions");return e.forEach(e=>{"instructions"in e?this.instructions=this.instructions.concat(e.instructions):"data"in e&&"programId"in e&&"keys"in e?this.instructions.push(e):this.instructions.push(new TransactionInstruction(e))}),this}compileMessage(){const{nonceInfo:e}=this;e&&this.instructions[0]!=e.nonceInstruction&&(this.recentBlockhash=e.nonce,this.instructions.unshift(e.nonceInstruction));const{recentBlockhash:t}=this;if(!t)throw new Error("Transaction recentBlockhash required");let r;if(this.instructions.length<1&&console.warn("No instructions provided"),this.feePayer)r=this.feePayer;else{if(!(this.signatures.length>0&&this.signatures[0].publicKey))throw new Error("Transaction fee payer required");r=this.signatures[0].publicKey}for(let e=0;e<this.instructions.length;e++)if(void 0===this.instructions[e].programId)throw new Error(`Transaction instruction index ${e} has undefined program id`);const n=[],s=[];this.instructions.forEach(e=>{e.keys.forEach(e=>{s.push({...e})});const t=e.programId.toString();n.includes(t)||n.push(t)}),n.forEach(e=>{s.push({pubkey:new PublicKey(e),isSigner:!1,isWritable:!1})}),s.sort((function(e,t){const r=e.isSigner===t.isSigner?0:e.isSigner?-1:1,n=e.isWritable===t.isWritable?0:e.isWritable?-1:1;return r||n}));const i=[];s.forEach(e=>{const t=e.pubkey.toString(),r=i.findIndex(e=>e.pubkey.toString()===t);r>-1?i[r].isWritable=i[r].isWritable||e.isWritable:i.push(e)});const o=i.findIndex(e=>e.pubkey.equals(r));if(o>-1){const[e]=i.splice(o,1);e.isSigner=!0,e.isWritable=!0,i.unshift(e)}else i.unshift({pubkey:r,isSigner:!0,isWritable:!0});for(const e of this.signatures){const t=i.findIndex(t=>t.pubkey.equals(e.publicKey));if(!(t>-1))throw new Error("unknown signer: "+e.publicKey.toString());i[t].isSigner||(i[t].isSigner=!0,console.warn("Transaction references a signature that is unnecessary, only the fee payer and instruction signer accounts should sign a transaction. This behavior is deprecated and will throw an error in the next major version release."))}let c=0,a=0,u=0;const l=[],d=[];i.forEach(({pubkey:e,isSigner:t,isWritable:r})=>{t?(l.push(e.toString()),c+=1,r||(a+=1)):(d.push(e.toString()),r||(u+=1))});const h=l.concat(d),p=this.instructions.map(e=>{const{data:t,programId:r}=e;return{programIdIndex:h.indexOf(r.toString()),accounts:e.keys.map(e=>h.indexOf(e.pubkey.toString())),data:b.a.encode(t)}});return p.forEach(e=>{z(e.programIdIndex>=0),e.accounts.forEach(e=>z(e>=0))}),new Message({header:{numRequiredSignatures:c,numReadonlySignedAccounts:a,numReadonlyUnsignedAccounts:u},accountKeys:h,recentBlockhash:t,instructions:p})}_compile(){const e=this.compileMessage(),t=e.accountKeys.slice(0,e.header.numRequiredSignatures);if(this.signatures.length===t.length){if(this.signatures.every((e,r)=>t[r].equals(e.publicKey)))return e}return this.signatures=t.map(e=>({signature:null,publicKey:e})),e}serializeMessage(){return this._compile().serialize()}setSigners(...e){if(0===e.length)throw new Error("No signers");const t=new Set;this.signatures=e.filter(e=>{const r=e.toString();return!t.has(r)&&(t.add(r),!0)}).map(e=>({signature:null,publicKey:e}))}sign(...e){if(0===e.length)throw new Error("No signers");const t=new Set,r=[];for(const n of e){const e=n.publicKey.toString();t.has(e)||(t.add(e),r.push(n))}this.signatures=r.map(e=>({signature:null,publicKey:e.publicKey}));const n=this._compile();this._partialSign(n,...r),this._verifySignatures(n.serialize(),!0)}partialSign(...e){if(0===e.length)throw new Error("No signers");const t=new Set,r=[];for(const n of e){const e=n.publicKey.toString();t.has(e)||(t.add(e),r.push(n))}const n=this._compile();this._partialSign(n,...r)}_partialSign(e,...t){const r=e.serialize();t.forEach(e=>{const t=o.a.sign.detached(r,e.secretKey);this._addSignature(e.publicKey,w(t))})}addSignature(e,t){this._compile(),this._addSignature(e,t)}_addSignature(e,t){z(64===t.length);const r=this.signatures.findIndex(t=>e.equals(t.publicKey));if(r<0)throw new Error("unknown signer: "+e.toString());this.signatures[r].signature=c.Buffer.from(t)}verifySignatures(){return this._verifySignatures(this.serializeMessage(),!0)}_verifySignatures(e,t){for(const{signature:r,publicKey:n}of this.signatures)if(null===r){if(t)return!1}else if(!o.a.sign.detached.verify(e,r,n.toBuffer()))return!1;return!0}serialize(e){const{requireAllSignatures:t,verifySignatures:r}=Object.assign({requireAllSignatures:!0,verifySignatures:!0},e),n=this.serializeMessage();if(r&&!this._verifySignatures(n,t))throw new Error("Signature verification failed");return this._serialize(n)}_serialize(e){const{signatures:t}=this,r=[];W(r,t.length);const n=r.length+64*t.length+e.length,s=c.Buffer.alloc(n);return z(t.length<256),c.Buffer.from(r).copy(s,0),t.forEach(({signature:e},t)=>{null!==e&&(z(64===e.length,"signature has invalid length"),c.Buffer.from(e).copy(s,r.length+64*t))}),e.copy(s,r.length+64*t.length),z(s.length<=x,`Transaction too large: ${s.length} > ${x}`),s}get keys(){return z(1===this.instructions.length),this.instructions[0].keys.map(e=>e.pubkey)}get programId(){return z(1===this.instructions.length),this.instructions[0].programId}get data(){return z(1===this.instructions.length),this.instructions[0].data}static from(e){let t=[...e];const r=K(t);let n=[];for(let e=0;e<r;e++){const e=t.slice(0,64);t=t.slice(64),n.push(b.a.encode(c.Buffer.from(e)))}return Transaction.populate(Message.from(t),n)}static populate(e,t){const r=new Transaction;return r.recentBlockhash=e.recentBlockhash,e.header.numRequiredSignatures>0&&(r.feePayer=e.accountKeys[0]),t.forEach((t,n)=>{const s={signature:t==b.a.encode(R)?null:b.a.decode(t),publicKey:e.accountKeys[n]};r.signatures.push(s)}),e.instructions.forEach(t=>{const n=t.accounts.map(t=>{const n=e.accountKeys[t];return{pubkey:n,isSigner:r.signatures.some(e=>e.publicKey.toString()===n.toString()),isWritable:e.isAccountWritable(t)}});r.instructions.push(new TransactionInstruction({keys:n,programId:e.accountKeys[t.programIdIndex],data:b.a.decode(t.data)}))}),r}}const N=new PublicKey("SysvarC1ock11111111111111111111111111111111"),L=new PublicKey("SysvarRecentB1ockHashes11111111111111111111"),q=new PublicKey("SysvarRent111111111111111111111111111111111"),U=new PublicKey("SysvarRewards111111111111111111111111111111"),M=new PublicKey("SysvarStakeHistory1111111111111111111111111"),D=new PublicKey("Sysvar1nstructions1111111111111111111111111");async function V(e,t,r,n){const s=n&&{skipPreflight:n.skipPreflight,preflightCommitment:n.preflightCommitment||n.commitment},i=await e.sendTransaction(t,r,s),o=(await e.confirmTransaction(i,n&&n.commitment)).value;if(o.err)throw new Error(`Transaction ${i} failed (${JSON.stringify(o)})`);return i}function F(e){return new Promise(t=>setTimeout(t,e))}function $(e,t){const r=e.layout.span>=0?e.layout.span:function(e,t){let r=0;return e.layout.fields.forEach(e=>{e.span>=0?r+=e.span:"function"==typeof e.alloc&&(r+=e.alloc(t[e.property]))}),r}(e,t),n=c.Buffer.alloc(r),s=Object.assign({instruction:e.index},t);return e.layout.encode(s,n),n}function H(e,t){let r;try{r=e.layout.decode(t)}catch(e){throw new Error("invalid instruction; "+e)}if(r.instruction!==e.index)throw new Error(`invalid instruction; instruction index mismatch ${r.instruction} != ${e.index}`);return r}const Y=p.nu64("lamportsPerSignature"),G=p.struct([p.u32("version"),p.u32("state"),C("authorizedPubkey"),C("nonce"),p.struct([Y],"feeCalculator")]),J=G.span;class NonceAccount{constructor(e){s()(this,"authorizedPubkey",void 0),s()(this,"nonce",void 0),s()(this,"feeCalculator",void 0),this.authorizedPubkey=e.authorizedPubkey,this.nonce=e.nonce,this.feeCalculator=e.feeCalculator}static fromAccountData(e){const t=G.decode(w(e),0);return new NonceAccount({authorizedPubkey:new PublicKey(t.authorizedPubkey),nonce:new PublicKey(t.nonce).toString(),feeCalculator:t.feeCalculator})}}class SystemInstruction{constructor(){}static decodeInstructionType(e){this.checkProgramId(e.programId);const t=p.u32("instruction").decode(e.data);let r;for(const[e,n]of Object.entries(Z))if(n.index==t){r=e;break}if(!r)throw new Error("Instruction type incorrect; not a SystemInstruction");return r}static decodeCreateAccount(e){this.checkProgramId(e.programId),this.checkKeyLength(e.keys,2);const{lamports:t,space:r,programId:n}=H(Z.Create,e.data);return{fromPubkey:e.keys[0].pubkey,newAccountPubkey:e.keys[1].pubkey,lamports:t,space:r,programId:new PublicKey(n)}}static decodeTransfer(e){this.checkProgramId(e.programId),this.checkKeyLength(e.keys,2);const{lamports:t}=H(Z.Transfer,e.data);return{fromPubkey:e.keys[0].pubkey,toPubkey:e.keys[1].pubkey,lamports:t}}static decodeTransferWithSeed(e){this.checkProgramId(e.programId),this.checkKeyLength(e.keys,3);const{lamports:t,seed:r,programId:n}=H(Z.TransferWithSeed,e.data);return{fromPubkey:e.keys[0].pubkey,basePubkey:e.keys[1].pubkey,toPubkey:e.keys[2].pubkey,lamports:t,seed:r,programId:new PublicKey(n)}}static decodeAllocate(e){this.checkProgramId(e.programId),this.checkKeyLength(e.keys,1);const{space:t}=H(Z.Allocate,e.data);return{accountPubkey:e.keys[0].pubkey,space:t}}static decodeAllocateWithSeed(e){this.checkProgramId(e.programId),this.checkKeyLength(e.keys,1);const{base:t,seed:r,space:n,programId:s}=H(Z.AllocateWithSeed,e.data);return{accountPubkey:e.keys[0].pubkey,basePubkey:new PublicKey(t),seed:r,space:n,programId:new PublicKey(s)}}static decodeAssign(e){this.checkProgramId(e.programId),this.checkKeyLength(e.keys,1);const{programId:t}=H(Z.Assign,e.data);return{accountPubkey:e.keys[0].pubkey,programId:new PublicKey(t)}}static decodeAssignWithSeed(e){this.checkProgramId(e.programId),this.checkKeyLength(e.keys,1);const{base:t,seed:r,programId:n}=H(Z.AssignWithSeed,e.data);return{accountPubkey:e.keys[0].pubkey,basePubkey:new PublicKey(t),seed:r,programId:new PublicKey(n)}}static decodeCreateWithSeed(e){this.checkProgramId(e.programId),this.checkKeyLength(e.keys,2);const{base:t,seed:r,lamports:n,space:s,programId:i}=H(Z.CreateWithSeed,e.data);return{fromPubkey:e.keys[0].pubkey,newAccountPubkey:e.keys[1].pubkey,basePubkey:new PublicKey(t),seed:r,lamports:n,space:s,programId:new PublicKey(i)}}static decodeNonceInitialize(e){this.checkProgramId(e.programId),this.checkKeyLength(e.keys,3);const{authorized:t}=H(Z.InitializeNonceAccount,e.data);return{noncePubkey:e.keys[0].pubkey,authorizedPubkey:new PublicKey(t)}}static decodeNonceAdvance(e){return this.checkProgramId(e.programId),this.checkKeyLength(e.keys,3),H(Z.AdvanceNonceAccount,e.data),{noncePubkey:e.keys[0].pubkey,authorizedPubkey:e.keys[2].pubkey}}static decodeNonceWithdraw(e){this.checkProgramId(e.programId),this.checkKeyLength(e.keys,5);const{lamports:t}=H(Z.WithdrawNonceAccount,e.data);return{noncePubkey:e.keys[0].pubkey,toPubkey:e.keys[1].pubkey,authorizedPubkey:e.keys[4].pubkey,lamports:t}}static decodeNonceAuthorize(e){this.checkProgramId(e.programId),this.checkKeyLength(e.keys,2);const{authorized:t}=H(Z.AuthorizeNonceAccount,e.data);return{noncePubkey:e.keys[0].pubkey,authorizedPubkey:e.keys[1].pubkey,newAuthorizedPubkey:new PublicKey(t)}}static checkProgramId(e){if(!e.equals(SystemProgram.programId))throw new Error("invalid instruction; programId is not SystemProgram")}static checkKeyLength(e,t){if(e.length<t)throw new Error(`invalid instruction; found ${e.length} keys, expected at least ${t}`)}}const Z=Object.freeze({Create:{index:0,layout:p.struct([p.u32("instruction"),p.ns64("lamports"),p.ns64("space"),C("programId")])},Assign:{index:1,layout:p.struct([p.u32("instruction"),C("programId")])},Transfer:{index:2,layout:p.struct([p.u32("instruction"),p.ns64("lamports")])},CreateWithSeed:{index:3,layout:p.struct([p.u32("instruction"),C("base"),T("seed"),p.ns64("lamports"),p.ns64("space"),C("programId")])},AdvanceNonceAccount:{index:4,layout:p.struct([p.u32("instruction")])},WithdrawNonceAccount:{index:5,layout:p.struct([p.u32("instruction"),p.ns64("lamports")])},InitializeNonceAccount:{index:6,layout:p.struct([p.u32("instruction"),C("authorized")])},AuthorizeNonceAccount:{index:7,layout:p.struct([p.u32("instruction"),C("authorized")])},Allocate:{index:8,layout:p.struct([p.u32("instruction"),p.ns64("space")])},AllocateWithSeed:{index:9,layout:p.struct([p.u32("instruction"),C("base"),T("seed"),p.ns64("space"),C("programId")])},AssignWithSeed:{index:10,layout:p.struct([p.u32("instruction"),C("base"),T("seed"),C("programId")])},TransferWithSeed:{index:11,layout:p.struct([p.u32("instruction"),p.ns64("lamports"),T("seed"),C("programId")])}});class SystemProgram{constructor(){}static createAccount(e){const t=$(Z.Create,{lamports:e.lamports,space:e.space,programId:w(e.programId.toBuffer())});return new TransactionInstruction({keys:[{pubkey:e.fromPubkey,isSigner:!0,isWritable:!0},{pubkey:e.newAccountPubkey,isSigner:!0,isWritable:!0}],programId:this.programId,data:t})}static transfer(e){let t,r;if("basePubkey"in e){t=$(Z.TransferWithSeed,{lamports:e.lamports,seed:e.seed,programId:w(e.programId.toBuffer())}),r=[{pubkey:e.fromPubkey,isSigner:!1,isWritable:!0},{pubkey:e.basePubkey,isSigner:!0,isWritable:!1},{pubkey:e.toPubkey,isSigner:!1,isWritable:!0}]}else{t=$(Z.Transfer,{lamports:e.lamports}),r=[{pubkey:e.fromPubkey,isSigner:!0,isWritable:!0},{pubkey:e.toPubkey,isSigner:!1,isWritable:!0}]}return new TransactionInstruction({keys:r,programId:this.programId,data:t})}static assign(e){let t,r;if("basePubkey"in e){t=$(Z.AssignWithSeed,{base:w(e.basePubkey.toBuffer()),seed:e.seed,programId:w(e.programId.toBuffer())}),r=[{pubkey:e.accountPubkey,isSigner:!1,isWritable:!0},{pubkey:e.basePubkey,isSigner:!0,isWritable:!1}]}else{t=$(Z.Assign,{programId:w(e.programId.toBuffer())}),r=[{pubkey:e.accountPubkey,isSigner:!0,isWritable:!0}]}return new TransactionInstruction({keys:r,programId:this.programId,data:t})}static createAccountWithSeed(e){const t=$(Z.CreateWithSeed,{base:w(e.basePubkey.toBuffer()),seed:e.seed,lamports:e.lamports,space:e.space,programId:w(e.programId.toBuffer())});let r=[{pubkey:e.fromPubkey,isSigner:!0,isWritable:!0},{pubkey:e.newAccountPubkey,isSigner:!1,isWritable:!0}];return e.basePubkey!=e.fromPubkey&&r.push({pubkey:e.basePubkey,isSigner:!0,isWritable:!1}),new TransactionInstruction({keys:r,programId:this.programId,data:t})}static createNonceAccount(e){const t=new Transaction;"basePubkey"in e&&"seed"in e?t.add(SystemProgram.createAccountWithSeed({fromPubkey:e.fromPubkey,newAccountPubkey:e.noncePubkey,basePubkey:e.basePubkey,seed:e.seed,lamports:e.lamports,space:J,programId:this.programId})):t.add(SystemProgram.createAccount({fromPubkey:e.fromPubkey,newAccountPubkey:e.noncePubkey,lamports:e.lamports,space:J,programId:this.programId}));const r={noncePubkey:e.noncePubkey,authorizedPubkey:e.authorizedPubkey};return t.add(this.nonceInitialize(r)),t}static nonceInitialize(e){const t=$(Z.InitializeNonceAccount,{authorized:w(e.authorizedPubkey.toBuffer())}),r={keys:[{pubkey:e.noncePubkey,isSigner:!1,isWritable:!0},{pubkey:L,isSigner:!1,isWritable:!1},{pubkey:q,isSigner:!1,isWritable:!1}],programId:this.programId,data:t};return new TransactionInstruction(r)}static nonceAdvance(e){const t=$(Z.AdvanceNonceAccount),r={keys:[{pubkey:e.noncePubkey,isSigner:!1,isWritable:!0},{pubkey:L,isSigner:!1,isWritable:!1},{pubkey:e.authorizedPubkey,isSigner:!0,isWritable:!1}],programId:this.programId,data:t};return new TransactionInstruction(r)}static nonceWithdraw(e){const t=$(Z.WithdrawNonceAccount,{lamports:e.lamports});return new TransactionInstruction({keys:[{pubkey:e.noncePubkey,isSigner:!1,isWritable:!0},{pubkey:e.toPubkey,isSigner:!1,isWritable:!0},{pubkey:L,isSigner:!1,isWritable:!1},{pubkey:q,isSigner:!1,isWritable:!1},{pubkey:e.authorizedPubkey,isSigner:!0,isWritable:!1}],programId:this.programId,data:t})}static nonceAuthorize(e){const t=$(Z.AuthorizeNonceAccount,{authorized:w(e.newAuthorizedPubkey.toBuffer())});return new TransactionInstruction({keys:[{pubkey:e.noncePubkey,isSigner:!1,isWritable:!0},{pubkey:e.authorizedPubkey,isSigner:!0,isWritable:!1}],programId:this.programId,data:t})}static allocate(e){let t,r;if("basePubkey"in e){t=$(Z.AllocateWithSeed,{base:w(e.basePubkey.toBuffer()),seed:e.seed,space:e.space,programId:w(e.programId.toBuffer())}),r=[{pubkey:e.accountPubkey,isSigner:!1,isWritable:!0},{pubkey:e.basePubkey,isSigner:!0,isWritable:!1}]}else{t=$(Z.Allocate,{space:e.space}),r=[{pubkey:e.accountPubkey,isSigner:!0,isWritable:!0}]}return new TransactionInstruction({keys:r,programId:this.programId,data:t})}}s()(SystemProgram,"programId",new PublicKey("11111111111111111111111111111111"));const X=x-300;class Loader{constructor(){}static getMinNumSignatures(e){return 2*(Math.ceil(e/Loader.chunkSize)+1+1)}static async load(e,t,r,n,s){{const i=await e.getMinimumBalanceForRentExemption(s.length),o=await e.getAccountInfo(r.publicKey,"confirmed");let c=null;if(null!==o){if(o.executable)return console.error("Program load failed, account is already executable"),!1;o.data.length!==s.length&&(c=c||new Transaction,c.add(SystemProgram.allocate({accountPubkey:r.publicKey,space:s.length}))),o.owner.equals(n)||(c=c||new Transaction,c.add(SystemProgram.assign({accountPubkey:r.publicKey,programId:n}))),o.lamports<i&&(c=c||new Transaction,c.add(SystemProgram.transfer({fromPubkey:t.publicKey,toPubkey:r.publicKey,lamports:i-o.lamports})))}else c=(new Transaction).add(SystemProgram.createAccount({fromPubkey:t.publicKey,newAccountPubkey:r.publicKey,lamports:i>0?i:1,space:s.length,programId:n}));null!==c&&await V(e,c,[t,r],{commitment:"confirmed"})}const i=p.struct([p.u32("instruction"),p.u32("offset"),p.u32("bytesLength"),p.u32("bytesLengthPadding"),p.seq(p.u8("byte"),p.offset(p.u32(),-8),"bytes")]),o=Loader.chunkSize;let a=0,u=s,l=[];for(;u.length>0;){const s=u.slice(0,o),b=c.Buffer.alloc(o+16);i.encode({instruction:0,offset:a,bytes:s},b);const d=(new Transaction).add({keys:[{pubkey:r.publicKey,isSigner:!0,isWritable:!0}],programId:n,data:b});if(l.push(V(e,d,[t,r],{commitment:"confirmed"})),e._rpcEndpoint.includes("solana.com")){const e=4;await F(1e3/e)}a+=o,u=u.slice(o)}await Promise.all(l);{const s=p.struct([p.u32("instruction")]),i=c.Buffer.alloc(s.span);s.encode({instruction:1},i);const o=(new Transaction).add({keys:[{pubkey:r.publicKey,isSigner:!0,isWritable:!0},{pubkey:q,isSigner:!1,isWritable:!1}],programId:n,data:i});await V(e,o,[t,r],{commitment:"confirmed"})}return!0}}s()(Loader,"chunkSize",X);const Q=new PublicKey("BPFLoader2111111111111111111111111111111111");class BpfLoader{static getMinNumSignatures(e){return Loader.getMinNumSignatures(e)}static load(e,t,r,n,s){return Loader.load(e,t,r,s,n)}}var ee={exports:{}};!function(e,t){var r=function(){if("undefined"!=typeof self)return self;if("undefined"!=typeof window)return window;if(void 0!==r)return r;throw new Error("unable to locate global object")}();e.exports=t=r.fetch,r.fetch&&(t.default=r.fetch.bind(r)),t.Headers=r.Headers,t.Request=r.Request,t.Response=r.Response}(ee,ee.exports);var te=ee.exports;function re(e){let t=0;for(;e>1;)e/=2,t++;return t}class EpochSchedule{constructor(e,t,r,n,i){s()(this,"slotsPerEpoch",void 0),s()(this,"leaderScheduleSlotOffset",void 0),s()(this,"warmup",void 0),s()(this,"firstNormalEpoch",void 0),s()(this,"firstNormalSlot",void 0),this.slotsPerEpoch=e,this.leaderScheduleSlotOffset=t,this.warmup=r,this.firstNormalEpoch=n,this.firstNormalSlot=i}getEpoch(e){return this.getEpochAndSlotIndex(e)[0]}getEpochAndSlotIndex(e){if(e<this.firstNormalSlot){const r=re(0===(t=e+32+1)?1:(t--,t|=t>>1,t|=t>>2,t|=t>>4,t|=t>>8,t|=t>>16,1+(t|=t>>32)))-re(32)-1;return[r,e-(this.getSlotsInEpoch(r)-32)]}{const t=e-this.firstNormalSlot,r=Math.floor(t/this.slotsPerEpoch);return[this.firstNormalEpoch+r,t%this.slotsPerEpoch]}var t}getFirstSlotInEpoch(e){return e<=this.firstNormalEpoch?32*(Math.pow(2,e)-1):(e-this.firstNormalEpoch)*this.slotsPerEpoch+this.firstNormalSlot}getLastSlotInEpoch(e){return this.getFirstSlotInEpoch(e)+this.getSlotsInEpoch(e)-1}getSlotsInEpoch(e){return e<this.firstNormalEpoch?Math.pow(2,e+re(32)):this.slotsPerEpoch}}class SendTransactionError extends Error{constructor(e,t){super(e),s()(this,"logs",void 0),this.logs=t}}const ne=Object(g.coerce)(Object(g.instance)(PublicKey),Object(g.string)(),e=>new PublicKey(e)),se=Object(g.tuple)([Object(g.string)(),Object(g.literal)("base64")]),ie=Object(g.coerce)(Object(g.instance)(c.Buffer),se,e=>c.Buffer.from(e[0],"base64")),oe=3e4;function ce(e){return Object(g.union)([Object(g.type)({jsonrpc:Object(g.literal)("2.0"),id:Object(g.string)(),result:e}),Object(g.type)({jsonrpc:Object(g.literal)("2.0"),id:Object(g.string)(),error:Object(g.type)({code:Object(g.unknown)(),message:Object(g.string)(),data:Object(g.optional)(Object(g.any)())})})])}const ae=ce(Object(g.unknown)());function ue(e){return Object(g.coerce)(ce(e),ae,t=>"error"in t?t:{...t,result:Object(g.create)(t.result,e)})}function le(e){return ue(Object(g.type)({context:Object(g.type)({slot:Object(g.number)()}),value:e}))}function be(e){return Object(g.type)({context:Object(g.type)({slot:Object(g.number)()}),value:e})}const de=Object(g.type)({foundation:Object(g.number)(),foundationTerm:Object(g.number)(),initial:Object(g.number)(),taper:Object(g.number)(),terminal:Object(g.number)()}),he=ue(Object(g.array)(Object(g.nullable)(Object(g.type)({epoch:Object(g.number)(),effectiveSlot:Object(g.number)(),amount:Object(g.number)(),postBalance:Object(g.number)()})))),pe=Object(g.type)({epoch:Object(g.number)(),slotIndex:Object(g.number)(),slotsInEpoch:Object(g.number)(),absoluteSlot:Object(g.number)(),blockHeight:Object(g.optional)(Object(g.number)()),transactionCount:Object(g.optional)(Object(g.number)())}),ge=Object(g.type)({slotsPerEpoch:Object(g.number)(),leaderScheduleSlotOffset:Object(g.number)(),warmup:Object(g.boolean)(),firstNormalEpoch:Object(g.number)(),firstNormalSlot:Object(g.number)()}),me=Object(g.record)(Object(g.string)(),Object(g.array)(Object(g.number)())),ye=Object(g.nullable)(Object(g.union)([Object(g.type)({}),Object(g.string)()])),fe=Object(g.type)({err:ye}),ke=Object(g.literal)("receivedSignature"),Oe=Object(g.type)({"solana-core":Object(g.string)(),"feature-set":Object(g.optional)(Object(g.number)())}),Se=le(Object(g.type)({err:Object(g.nullable)(Object(g.union)([Object(g.type)({}),Object(g.string)()])),logs:Object(g.nullable)(Object(g.array)(Object(g.string)()))}));const we=ue(de),je=ue(pe),_e=ue(ge),Pe=ue(me),Ie=ue(Object(g.number)()),Ae=le(Object(g.type)({total:Object(g.number)(),circulating:Object(g.number)(),nonCirculating:Object(g.number)(),nonCirculatingAccounts:Object(g.array)(ne)})),Ee=Object(g.type)({amount:Object(g.string)(),uiAmount:Object(g.nullable)(Object(g.number)()),decimals:Object(g.number)(),uiAmountString:Object(g.optional)(Object(g.string)())}),ve=le(Object(g.array)(Object(g.type)({address:ne,amount:Object(g.string)(),uiAmount:Object(g.nullable)(Object(g.number)()),decimals:Object(g.number)(),uiAmountString:Object(g.optional)(Object(g.string)())}))),Be=le(Object(g.array)(Object(g.type)({pubkey:ne,account:Object(g.type)({executable:Object(g.boolean)(),owner:ne,lamports:Object(g.number)(),data:ie,rentEpoch:Object(g.number)()})}))),Ce=Object(g.type)({program:Object(g.string)(),parsed:Object(g.unknown)(),space:Object(g.number)()}),Te=le(Object(g.array)(Object(g.type)({pubkey:ne,account:Object(g.type)({executable:Object(g.boolean)(),owner:ne,lamports:Object(g.number)(),data:Ce,rentEpoch:Object(g.number)()})}))),Ke=le(Object(g.array)(Object(g.type)({lamports:Object(g.number)(),address:ne}))),We=Object(g.type)({executable:Object(g.boolean)(),owner:ne,lamports:Object(g.number)(),data:ie,rentEpoch:Object(g.number)()}),ze=Object(g.type)({pubkey:ne,account:We}),Re=Object(g.coerce)(Object(g.union)([Object(g.instance)(c.Buffer),Ce]),Object(g.union)([se,Ce]),e=>Array.isArray(e)?Object(g.create)(e,ie):e),xe=Object(g.type)({executable:Object(g.boolean)(),owner:ne,lamports:Object(g.number)(),data:Re,rentEpoch:Object(g.number)()}),Ne=Object(g.type)({pubkey:ne,account:xe}),Le=Object(g.type)({state:Object(g.union)([Object(g.literal)("active"),Object(g.literal)("inactive"),Object(g.literal)("activating"),Object(g.literal)("deactivating")]),active:Object(g.number)(),inactive:Object(g.number)()}),qe=ue(Object(g.array)(Object(g.type)({signature:Object(g.string)(),slot:Object(g.number)(),err:ye,memo:Object(g.nullable)(Object(g.string)()),blockTime:Object(g.optional)(Object(g.nullable)(Object(g.number)()))}))),Ue=ue(Object(g.array)(Object(g.type)({signature:Object(g.string)(),slot:Object(g.number)(),err:ye,memo:Object(g.nullable)(Object(g.string)()),blockTime:Object(g.optional)(Object(g.nullable)(Object(g.number)()))}))),Me=Object(g.type)({subscription:Object(g.number)(),result:be(We)}),De=Object(g.type)({pubkey:ne,account:We}),Ve=Object(g.type)({subscription:Object(g.number)(),result:be(De)}),Fe=Object(g.type)({parent:Object(g.number)(),slot:Object(g.number)(),root:Object(g.number)()}),$e=Object(g.type)({subscription:Object(g.number)(),result:Fe}),He=Object(g.union)([Object(g.type)({type:Object(g.union)([Object(g.literal)("firstShredReceived"),Object(g.literal)("completed"),Object(g.literal)("optimisticConfirmation"),Object(g.literal)("root")]),slot:Object(g.number)(),timestamp:Object(g.number)()}),Object(g.type)({type:Object(g.literal)("createdBank"),parent:Object(g.number)(),slot:Object(g.number)(),timestamp:Object(g.number)()}),Object(g.type)({type:Object(g.literal)("frozen"),slot:Object(g.number)(),timestamp:Object(g.number)(),stats:Object(g.type)({numTransactionEntries:Object(g.number)(),numSuccessfulTransactions:Object(g.number)(),numFailedTransactions:Object(g.number)(),maxTransactionsPerEntry:Object(g.number)()})}),Object(g.type)({type:Object(g.literal)("dead"),slot:Object(g.number)(),timestamp:Object(g.number)(),err:Object(g.string)()})]),Ye=Object(g.type)({subscription:Object(g.number)(),result:He}),Ge=Object(g.type)({subscription:Object(g.number)(),result:be(Object(g.union)([fe,ke]))}),Je=Object(g.type)({subscription:Object(g.number)(),result:Object(g.number)()}),Ze=Object(g.type)({pubkey:Object(g.string)(),gossip:Object(g.nullable)(Object(g.string)()),tpu:Object(g.nullable)(Object(g.string)()),rpc:Object(g.nullable)(Object(g.string)()),version:Object(g.nullable)(Object(g.string)())}),Xe=Object(g.type)({votePubkey:Object(g.string)(),nodePubkey:Object(g.string)(),activatedStake:Object(g.number)(),epochVoteAccount:Object(g.boolean)(),epochCredits:Object(g.array)(Object(g.tuple)([Object(g.number)(),Object(g.number)(),Object(g.number)()])),commission:Object(g.number)(),lastVote:Object(g.number)(),rootSlot:Object(g.nullable)(Object(g.number)())}),Qe=ue(Object(g.type)({current:Object(g.array)(Xe),delinquent:Object(g.array)(Xe)})),et=Object(g.union)([Object(g.literal)("processed"),Object(g.literal)("confirmed"),Object(g.literal)("finalized")]),tt=Object(g.type)({slot:Object(g.number)(),confirmations:Object(g.nullable)(Object(g.number)()),err:ye,confirmationStatus:Object(g.optional)(et)}),rt=le(Object(g.array)(Object(g.nullable)(tt))),nt=ue(Object(g.number)()),st=Object(g.type)({signatures:Object(g.array)(Object(g.string)()),message:Object(g.type)({accountKeys:Object(g.array)(Object(g.string)()),header:Object(g.type)({numRequiredSignatures:Object(g.number)(),numReadonlySignedAccounts:Object(g.number)(),numReadonlyUnsignedAccounts:Object(g.number)()}),instructions:Object(g.array)(Object(g.type)({accounts:Object(g.array)(Object(g.number)()),data:Object(g.string)(),programIdIndex:Object(g.number)()})),recentBlockhash:Object(g.string)()})}),it=Object(g.type)({parsed:Object(g.unknown)(),program:Object(g.string)(),programId:ne}),ot=Object(g.type)({accounts:Object(g.array)(ne),data:Object(g.string)(),programId:ne}),ct=Object(g.union)([ot,it]),at=Object(g.union)([Object(g.type)({parsed:Object(g.unknown)(),program:Object(g.string)(),programId:Object(g.string)()}),Object(g.type)({accounts:Object(g.array)(Object(g.string)()),data:Object(g.string)(),programId:Object(g.string)()})]),ut=Object(g.coerce)(ct,at,e=>"accounts"in e?Object(g.create)(e,ot):Object(g.create)(e,it)),lt=Object(g.type)({signatures:Object(g.array)(Object(g.string)()),message:Object(g.type)({accountKeys:Object(g.array)(Object(g.type)({pubkey:ne,signer:Object(g.boolean)(),writable:Object(g.boolean)()})),instructions:Object(g.array)(ut),recentBlockhash:Object(g.string)()})}),bt=Object(g.type)({accountIndex:Object(g.number)(),mint:Object(g.string)(),uiTokenAmount:Ee}),dt=Object(g.type)({err:ye,fee:Object(g.number)(),innerInstructions:Object(g.optional)(Object(g.nullable)(Object(g.array)(Object(g.type)({index:Object(g.number)(),instructions:Object(g.array)(Object(g.type)({accounts:Object(g.array)(Object(g.number)()),data:Object(g.string)(),programIdIndex:Object(g.number)()}))})))),preBalances:Object(g.array)(Object(g.number)()),postBalances:Object(g.array)(Object(g.number)()),logMessages:Object(g.optional)(Object(g.nullable)(Object(g.array)(Object(g.string)()))),preTokenBalances:Object(g.optional)(Object(g.nullable)(Object(g.array)(bt))),postTokenBalances:Object(g.optional)(Object(g.nullable)(Object(g.array)(bt)))}),ht=Object(g.type)({err:ye,fee:Object(g.number)(),innerInstructions:Object(g.optional)(Object(g.nullable)(Object(g.array)(Object(g.type)({index:Object(g.number)(),instructions:Object(g.array)(ut)})))),preBalances:Object(g.array)(Object(g.number)()),postBalances:Object(g.array)(Object(g.number)()),logMessages:Object(g.optional)(Object(g.nullable)(Object(g.array)(Object(g.string)()))),preTokenBalances:Object(g.optional)(Object(g.nullable)(Object(g.array)(bt))),postTokenBalances:Object(g.optional)(Object(g.nullable)(Object(g.array)(bt)))}),pt=ue(Object(g.nullable)(Object(g.type)({blockhash:Object(g.string)(),previousBlockhash:Object(g.string)(),parentSlot:Object(g.number)(),transactions:Object(g.array)(Object(g.type)({transaction:st,meta:Object(g.nullable)(dt)})),rewards:Object(g.optional)(Object(g.array)(Object(g.type)({pubkey:Object(g.string)(),lamports:Object(g.number)(),postBalance:Object(g.nullable)(Object(g.number)()),rewardType:Object(g.nullable)(Object(g.string)())}))),blockTime:Object(g.nullable)(Object(g.number)())}))),gt=ue(Object(g.nullable)(Object(g.type)({blockhash:Object(g.string)(),previousBlockhash:Object(g.string)(),parentSlot:Object(g.number)(),signatures:Object(g.array)(Object(g.string)()),blockTime:Object(g.nullable)(Object(g.number)())}))),mt=ue(Object(g.nullable)(Object(g.type)({slot:Object(g.number)(),meta:dt,blockTime:Object(g.optional)(Object(g.nullable)(Object(g.number)())),transaction:st}))),yt=ue(Object(g.nullable)(Object(g.type)({slot:Object(g.number)(),transaction:lt,meta:Object(g.nullable)(ht),blockTime:Object(g.optional)(Object(g.nullable)(Object(g.number)()))}))),ft=le(Object(g.type)({blockhash:Object(g.string)(),feeCalculator:Object(g.type)({lamportsPerSignature:Object(g.number)()})})),kt=Object(g.type)({slot:Object(g.number)(),numTransactions:Object(g.number)(),numSlots:Object(g.number)(),samplePeriodSecs:Object(g.number)()}),Ot=ue(Object(g.array)(kt)),St=le(Object(g.nullable)(Object(g.type)({feeCalculator:Object(g.type)({lamportsPerSignature:Object(g.number)()})}))),wt=ue(Object(g.string)()),jt=ue(Object(g.string)()),_t=Object(g.type)({err:ye,logs:Object(g.array)(Object(g.string)()),signature:Object(g.string)()}),Pt=Object(g.type)({result:be(_t),subscription:Object(g.number)()});class Connection{constructor(e,t){s()(this,"_commitment",void 0),s()(this,"_rpcEndpoint",void 0),s()(this,"_rpcWsEndpoint",void 0),s()(this,"_rpcClient",void 0),s()(this,"_rpcRequest",void 0),s()(this,"_rpcBatchRequest",void 0),s()(this,"_rpcWebSocket",void 0),s()(this,"_rpcWebSocketConnected",!1),s()(this,"_rpcWebSocketHeartbeat",null),s()(this,"_rpcWebSocketIdleTimeout",null),s()(this,"_disableBlockhashCaching",!1),s()(this,"_pollingBlockhash",!1),s()(this,"_blockhashInfo",{recentBlockhash:null,lastFetch:0,transactionSignatures:[],simulatedSignatures:[]}),s()(this,"_accountChangeSubscriptionCounter",0),s()(this,"_accountChangeSubscriptions",{}),s()(this,"_programAccountChangeSubscriptionCounter",0),s()(this,"_programAccountChangeSubscriptions",{}),s()(this,"_rootSubscriptionCounter",0),s()(this,"_rootSubscriptions",{}),s()(this,"_signatureSubscriptionCounter",0),s()(this,"_signatureSubscriptions",{}),s()(this,"_slotSubscriptionCounter",0),s()(this,"_slotSubscriptions",{}),s()(this,"_logsSubscriptionCounter",0),s()(this,"_logsSubscriptions",{}),s()(this,"_slotUpdateSubscriptionCounter",0),s()(this,"_slotUpdateSubscriptions",{});let r=new URL(e);r.protocol;let n,i,o,c;var a;t&&"string"==typeof t?this._commitment=t:t&&(this._commitment=t.commitment,n=t.wsEndpoint,i=t.httpHeaders,o=t.fetchMiddleware,c=t.disableRetryOnRateLimit),this._rpcEndpoint=e,this._rpcWsEndpoint=n||function(e){let t=new URL(e);const r="https:"===t.protocol;return t.protocol=r?"wss:":"ws:",t.host="",""!==t.port&&(t.port=String(Number(t.port)+1)),t.toString()}(e),this._rpcClient=function(e,t,r,n,s){let i;return n&&(i=(e,t)=>new Promise((r,s)=>{n(e,t,async(e,t)=>{try{r(await te(e,t))}catch(e){s(e)}})})),new f.a(async(t,n)=>{const o={method:"POST",body:t,agent:void 0,headers:Object.assign({"Content-Type":"application/json"},r||{})};try{let t,r=5,c=500;for(;(t=i?await i(e,o):await te(e,o),429===t.status)&&!0!==s&&(r-=1,0!==r);)console.log(`Server responded with ${t.status} ${t.statusText}.  Retrying after ${c}ms delay...`),await F(c),c*=2;const a=await t.text();t.ok?n(null,a):n(new Error(`${t.status} ${t.statusText}: ${a}`))}catch(e){n(e)}},{})}(r.toString(),0,i,o,c),this._rpcRequest=(a=this._rpcClient,(e,t)=>new Promise((r,n)=>{a.request(e,t,(e,t)=>{e?n(e):r(t)})})),this._rpcBatchRequest=function(e){return t=>new Promise((r,n)=>{0===t.length&&r([]);const s=t.map(t=>e.request(t.methodName,t.args));e.request(s,(e,t)=>{e?n(e):r(t)})})}(this._rpcClient),this._rpcWebSocket=new m.Client(this._rpcWsEndpoint,{autoconnect:!1,max_reconnects:1/0}),this._rpcWebSocket.on("open",this._wsOnOpen.bind(this)),this._rpcWebSocket.on("error",this._wsOnError.bind(this)),this._rpcWebSocket.on("close",this._wsOnClose.bind(this)),this._rpcWebSocket.on("accountNotification",this._wsOnAccountNotification.bind(this)),this._rpcWebSocket.on("programNotification",this._wsOnProgramAccountNotification.bind(this)),this._rpcWebSocket.on("slotNotification",this._wsOnSlotNotification.bind(this)),this._rpcWebSocket.on("slotsUpdatesNotification",this._wsOnSlotUpdatesNotification.bind(this)),this._rpcWebSocket.on("signatureNotification",this._wsOnSignatureNotification.bind(this)),this._rpcWebSocket.on("rootNotification",this._wsOnRootNotification.bind(this)),this._rpcWebSocket.on("logsNotification",this._wsOnLogsNotification.bind(this))}get commitment(){return this._commitment}async getBalanceAndContext(e,t){const r=this._buildArgs([e.toBase58()],t),n=await this._rpcRequest("getBalance",r),s=Object(g.create)(n,le(Object(g.number)()));if("error"in s)throw new Error("failed to get balance for "+e.toBase58()+": "+s.error.message);return s.result}async getBalance(e,t){return await this.getBalanceAndContext(e,t).then(e=>e.value).catch(t=>{throw new Error("failed to get balance of account "+e.toBase58()+": "+t)})}async getBlockTime(e){const t=await this._rpcRequest("getBlockTime",[e]),r=Object(g.create)(t,ue(Object(g.nullable)(Object(g.number)())));if("error"in r)throw new Error("failed to get block time for slot "+e+": "+r.error.message);return r.result}async getMinimumLedgerSlot(){const e=await this._rpcRequest("minimumLedgerSlot",[]),t=Object(g.create)(e,ue(Object(g.number)()));if("error"in t)throw new Error("failed to get minimum ledger slot: "+t.error.message);return t.result}async getFirstAvailableBlock(){const e=await this._rpcRequest("getFirstAvailableBlock",[]),t=Object(g.create)(e,Ie);if("error"in t)throw new Error("failed to get first available block: "+t.error.message);return t.result}async getSupply(e){const t=this._buildArgs([],e),r=await this._rpcRequest("getSupply",t),n=Object(g.create)(r,Ae);if("error"in n)throw new Error("failed to get supply: "+n.error.message);return n.result}async getTokenSupply(e,t){const r=this._buildArgs([e.toBase58()],t),n=await this._rpcRequest("getTokenSupply",r),s=Object(g.create)(n,le(Ee));if("error"in s)throw new Error("failed to get token supply: "+s.error.message);return s.result}async getTokenAccountBalance(e,t){const r=this._buildArgs([e.toBase58()],t),n=await this._rpcRequest("getTokenAccountBalance",r),s=Object(g.create)(n,le(Ee));if("error"in s)throw new Error("failed to get token account balance: "+s.error.message);return s.result}async getTokenAccountsByOwner(e,t,r){let n=[e.toBase58()];"mint"in t?n.push({mint:t.mint.toBase58()}):n.push({programId:t.programId.toBase58()});const s=this._buildArgs(n,r,"base64"),i=await this._rpcRequest("getTokenAccountsByOwner",s),o=Object(g.create)(i,Be);if("error"in o)throw new Error("failed to get token accounts owned by account "+e.toBase58()+": "+o.error.message);return o.result}async getParsedTokenAccountsByOwner(e,t,r){let n=[e.toBase58()];"mint"in t?n.push({mint:t.mint.toBase58()}):n.push({programId:t.programId.toBase58()});const s=this._buildArgs(n,r,"jsonParsed"),i=await this._rpcRequest("getTokenAccountsByOwner",s),o=Object(g.create)(i,Te);if("error"in o)throw new Error("failed to get token accounts owned by account "+e.toBase58()+": "+o.error.message);return o.result}async getLargestAccounts(e){const t={...e,commitment:e&&e.commitment||this.commitment},r=t.filter||t.commitment?[t]:[],n=await this._rpcRequest("getLargestAccounts",r),s=Object(g.create)(n,Ke);if("error"in s)throw new Error("failed to get largest accounts: "+s.error.message);return s.result}async getTokenLargestAccounts(e,t){const r=this._buildArgs([e.toBase58()],t),n=await this._rpcRequest("getTokenLargestAccounts",r),s=Object(g.create)(n,ve);if("error"in s)throw new Error("failed to get token largest accounts: "+s.error.message);return s.result}async getAccountInfoAndContext(e,t){const r=this._buildArgs([e.toBase58()],t,"base64"),n=await this._rpcRequest("getAccountInfo",r),s=Object(g.create)(n,le(Object(g.nullable)(We)));if("error"in s)throw new Error("failed to get info about account "+e.toBase58()+": "+s.error.message);return s.result}async getParsedAccountInfo(e,t){const r=this._buildArgs([e.toBase58()],t,"jsonParsed"),n=await this._rpcRequest("getAccountInfo",r),s=Object(g.create)(n,le(Object(g.nullable)(xe)));if("error"in s)throw new Error("failed to get info about account "+e.toBase58()+": "+s.error.message);return s.result}async getAccountInfo(e,t){try{return(await this.getAccountInfoAndContext(e,t)).value}catch(t){throw new Error("failed to get info about account "+e.toBase58()+": "+t)}}async getMultipleAccountsInfo(e,t){const r=e.map(e=>e.toBase58()),n=this._buildArgs([r],t,"base64"),s=await this._rpcRequest("getMultipleAccounts",n),i=Object(g.create)(s,le(Object(g.array)(Object(g.nullable)(We))));if("error"in i)throw new Error("failed to get info for accounts "+r+": "+i.error.message);return i.result.value}async getStakeActivation(e,t,r){const n=this._buildArgs([e.toBase58()],t,void 0,void 0!==r?{epoch:r}:void 0),s=await this._rpcRequest("getStakeActivation",n),i=Object(g.create)(s,ue(Le));if("error"in i)throw new Error(`failed to get Stake Activation ${e.toBase58()}: ${i.error.message}`);return i.result}async getProgramAccounts(e,t){const r={};let n,s;t&&("string"==typeof t?n=t:(n=t.commitment,s=t.encoding,t.dataSlice&&(r.dataSlice=t.dataSlice),t.filters&&(r.filters=t.filters)));const i=this._buildArgs([e.toBase58()],n,s||"base64",r),o=await this._rpcRequest("getProgramAccounts",i),c=Object(g.create)(o,ue(Object(g.array)(ze)));if("error"in c)throw new Error("failed to get accounts owned by program "+e.toBase58()+": "+c.error.message);return c.result}async getParsedProgramAccounts(e,t){const r={};let n;t&&("string"==typeof t?n=t:(n=t.commitment,t.filters&&(r.filters=t.filters)));const s=this._buildArgs([e.toBase58()],n,"jsonParsed",r),i=await this._rpcRequest("getProgramAccounts",s),o=Object(g.create)(i,ue(Object(g.array)(Ne)));if("error"in o)throw new Error("failed to get accounts owned by program "+e.toBase58()+": "+o.error.message);return o.result}async confirmTransaction(e,t){let r;try{r=b.a.decode(e)}catch(t){throw new Error("signature must be base58 encoded: "+e)}z(64===r.length,"signature has invalid length");const n=Date.now(),s=t||this.commitment;let i,o=null;const c=new Promise((t,r)=>{try{i=this.onSignature(e,(e,r)=>{i=void 0,o={context:r,value:e},t(null)},s)}catch(e){r(e)}});let a=6e4;switch(s){case"processed":case"recent":case"single":case"confirmed":case"singleGossip":a=3e4}try{await function(e,t){let r;const n=new Promise(e=>{r=setTimeout(()=>e(null),t)});return Promise.race([e,n]).then(e=>(clearTimeout(r),e))}(c,a)}finally{i&&this.removeSignatureListener(i)}if(null===o){const t=(Date.now()-n)/1e3;throw new Error(`Transaction was not confirmed in ${t.toFixed(2)} seconds. It is unknown if it succeeded or failed. Check signature ${e} using the Solana Explorer or CLI tools.`)}return o}async getClusterNodes(){const e=await this._rpcRequest("getClusterNodes",[]),t=Object(g.create)(e,ue(Object(g.array)(Ze)));if("error"in t)throw new Error("failed to get cluster nodes: "+t.error.message);return t.result}async getVoteAccounts(e){const t=this._buildArgs([],e),r=await this._rpcRequest("getVoteAccounts",t),n=Object(g.create)(r,Qe);if("error"in n)throw new Error("failed to get vote accounts: "+n.error.message);return n.result}async getSlot(e){const t=this._buildArgs([],e),r=await this._rpcRequest("getSlot",t),n=Object(g.create)(r,ue(Object(g.number)()));if("error"in n)throw new Error("failed to get slot: "+n.error.message);return n.result}async getSlotLeader(e){const t=this._buildArgs([],e),r=await this._rpcRequest("getSlotLeader",t),n=Object(g.create)(r,ue(Object(g.string)()));if("error"in n)throw new Error("failed to get slot leader: "+n.error.message);return n.result}async getSlotLeaders(e,t){const r=[e,t],n=await this._rpcRequest("getSlotLeaders",r),s=Object(g.create)(n,ue(Object(g.array)(ne)));if("error"in s)throw new Error("failed to get slot leaders: "+s.error.message);return s.result}async getSignatureStatus(e,t){const{context:r,value:n}=await this.getSignatureStatuses([e],t);z(1===n.length);return{context:r,value:n[0]}}async getSignatureStatuses(e,t){const r=[e];t&&r.push(t);const n=await this._rpcRequest("getSignatureStatuses",r),s=Object(g.create)(n,rt);if("error"in s)throw new Error("failed to get signature status: "+s.error.message);return s.result}async getTransactionCount(e){const t=this._buildArgs([],e),r=await this._rpcRequest("getTransactionCount",t),n=Object(g.create)(r,ue(Object(g.number)()));if("error"in n)throw new Error("failed to get transaction count: "+n.error.message);return n.result}async getTotalSupply(e){const t=this._buildArgs([],e),r=await this._rpcRequest("getSupply",t),n=Object(g.create)(r,Ae);if("error"in n)throw new Error("failed to get total supply: "+n.error.message);return n.result.value.total}async getInflationGovernor(e){const t=this._buildArgs([],e),r=await this._rpcRequest("getInflationGovernor",t),n=Object(g.create)(r,we);if("error"in n)throw new Error("failed to get inflation: "+n.error.message);return n.result}async getInflationReward(e,t,r){const n=this._buildArgs([e.map(e=>e.toBase58())],r,void 0,{epoch:t}),s=await this._rpcRequest("getInflationReward",n),i=Object(g.create)(s,he);if("error"in i)throw new Error("failed to get inflation reward: "+i.error.message);return i.result}async getEpochInfo(e){const t=this._buildArgs([],e),r=await this._rpcRequest("getEpochInfo",t),n=Object(g.create)(r,je);if("error"in n)throw new Error("failed to get epoch info: "+n.error.message);return n.result}async getEpochSchedule(){const e=await this._rpcRequest("getEpochSchedule",[]),t=Object(g.create)(e,_e);if("error"in t)throw new Error("failed to get epoch schedule: "+t.error.message);const r=t.result;return new EpochSchedule(r.slotsPerEpoch,r.leaderScheduleSlotOffset,r.warmup,r.firstNormalEpoch,r.firstNormalSlot)}async getLeaderSchedule(){const e=await this._rpcRequest("getLeaderSchedule",[]),t=Object(g.create)(e,Pe);if("error"in t)throw new Error("failed to get leader schedule: "+t.error.message);return t.result}async getMinimumBalanceForRentExemption(e,t){const r=this._buildArgs([e],t),n=await this._rpcRequest("getMinimumBalanceForRentExemption",r),s=Object(g.create)(n,nt);return"error"in s?(console.warn("Unable to fetch minimum balance for rent exemption"),0):s.result}async getRecentBlockhashAndContext(e){const t=this._buildArgs([],e),r=await this._rpcRequest("getRecentBlockhash",t),n=Object(g.create)(r,ft);if("error"in n)throw new Error("failed to get recent blockhash: "+n.error.message);return n.result}async getRecentPerformanceSamples(e){const t=this._buildArgs(e?[e]:[]),r=await this._rpcRequest("getRecentPerformanceSamples",t),n=Object(g.create)(r,Ot);if("error"in n)throw new Error("failed to get recent performance samples: "+n.error.message);return n.result}async getFeeCalculatorForBlockhash(e,t){const r=this._buildArgs([e],t),n=await this._rpcRequest("getFeeCalculatorForBlockhash",r),s=Object(g.create)(n,St);if("error"in s)throw new Error("failed to get fee calculator: "+s.error.message);const{context:i,value:o}=s.result;return{context:i,value:null!==o?o.feeCalculator:null}}async getRecentBlockhash(e){try{return(await this.getRecentBlockhashAndContext(e)).value}catch(e){throw new Error("failed to get recent blockhash: "+e)}}async getVersion(){const e=await this._rpcRequest("getVersion",[]),t=Object(g.create)(e,ue(Oe));if("error"in t)throw new Error("failed to get version: "+t.error.message);return t.result}async getBlock(e,t){const r=this._buildArgsAtLeastConfirmed([e],t&&t.commitment),n=await this._rpcRequest("getConfirmedBlock",r),s=Object(g.create)(n,pt);if("error"in s)throw new Error("failed to get confirmed block: "+s.error.message);const i=s.result;return i?{...i,transactions:i.transactions.map(({transaction:e,meta:t})=>{const r=new Message(e.message);return{meta:t,transaction:{...e,message:r}}})}:i}async getTransaction(e,t){const r=this._buildArgsAtLeastConfirmed([e],t&&t.commitment),n=await this._rpcRequest("getConfirmedTransaction",r),s=Object(g.create)(n,mt);if("error"in s)throw new Error("failed to get confirmed transaction: "+s.error.message);const i=s.result;return i?{...i,transaction:{...i.transaction,message:new Message(i.transaction.message)}}:i}async getConfirmedBlock(e,t){const r=await this.getBlock(e,{commitment:t});if(!r)throw new Error("Confirmed block "+e+" not found");return{...r,transactions:r.transactions.map(({transaction:e,meta:t})=>({meta:t,transaction:Transaction.populate(e.message,e.signatures)}))}}async getConfirmedBlockSignatures(e,t){const r=this._buildArgsAtLeastConfirmed([e],t,void 0,{transactionDetails:"signatures",rewards:!1}),n=await this._rpcRequest("getConfirmedBlock",r),s=Object(g.create)(n,gt);if("error"in s)throw new Error("failed to get confirmed block: "+s.error.message);const i=s.result;if(!i)throw new Error("Confirmed block "+e+" not found");return i}async getConfirmedTransaction(e,t){const r=await this.getTransaction(e,{commitment:t});if(!r)return r;const{message:n,signatures:s}=r.transaction;return{...r,transaction:Transaction.populate(n,s)}}async getParsedConfirmedTransaction(e,t){const r=this._buildArgsAtLeastConfirmed([e],t,"jsonParsed"),n=await this._rpcRequest("getConfirmedTransaction",r),s=Object(g.create)(n,yt);if("error"in s)throw new Error("failed to get confirmed transaction: "+s.error.message);return s.result}async getParsedConfirmedTransactions(e,t){const r=e.map(e=>({methodName:"getConfirmedTransaction",args:this._buildArgsAtLeastConfirmed([e],t,"jsonParsed")}));return(await this._rpcBatchRequest(r)).map(e=>{const t=Object(g.create)(e,yt);if("error"in t)throw new Error("failed to get confirmed transactions: "+t.error.message);return t.result})}async getConfirmedSignaturesForAddress(e,t,r){let n={},s=await this.getFirstAvailableBlock();for(;!("until"in n)&&!(--t<=0||t<s);)try{const e=await this.getConfirmedBlockSignatures(t,"finalized");e.signatures.length>0&&(n.until=e.signatures[e.signatures.length-1].toString())}catch(e){if(e.message.includes("skipped"))continue;throw e}let i=await this.getSlot("finalized");for(;!("before"in n||++r>i);)try{const e=await this.getConfirmedBlockSignatures(r);e.signatures.length>0&&(n.before=e.signatures[e.signatures.length-1].toString())}catch(e){if(e.message.includes("skipped"))continue;throw e}return(await this.getConfirmedSignaturesForAddress2(e,n)).map(e=>e.signature)}async getConfirmedSignaturesForAddress2(e,t,r){const n=this._buildArgsAtLeastConfirmed([e.toBase58()],r,void 0,t),s=await this._rpcRequest("getConfirmedSignaturesForAddress2",n),i=Object(g.create)(s,qe);if("error"in i)throw new Error("failed to get confirmed signatures for address: "+i.error.message);return i.result}async getSignaturesForAddress(e,t,r){const n=this._buildArgsAtLeastConfirmed([e.toBase58()],r,void 0,t),s=await this._rpcRequest("getSignaturesForAddress",n),i=Object(g.create)(s,Ue);if("error"in i)throw new Error("failed to get signatures for address: "+i.error.message);return i.result}async getNonceAndContext(e,t){const{context:r,value:n}=await this.getAccountInfoAndContext(e,t);let s=null;return null!==n&&(s=NonceAccount.fromAccountData(n.data)),{context:r,value:s}}async getNonce(e,t){return await this.getNonceAndContext(e,t).then(e=>e.value).catch(t=>{throw new Error("failed to get nonce for account "+e.toBase58()+": "+t)})}async requestAirdrop(e,t){const r=await this._rpcRequest("requestAirdrop",[e.toBase58(),t]),n=Object(g.create)(r,wt);if("error"in n)throw new Error("airdrop to "+e.toBase58()+" failed: "+n.error.message);return n.result}async _recentBlockhash(e){if(!e){for(;this._pollingBlockhash;)await F(100);const e=Date.now()-this._blockhashInfo.lastFetch>=oe;if(null!==this._blockhashInfo.recentBlockhash&&!e)return this._blockhashInfo.recentBlockhash}return await this._pollNewBlockhash()}async _pollNewBlockhash(){this._pollingBlockhash=!0;try{const e=Date.now();for(let e=0;e<50;e++){const{blockhash:e}=await this.getRecentBlockhash("finalized");if(this._blockhashInfo.recentBlockhash!=e)return this._blockhashInfo={recentBlockhash:e,lastFetch:Date.now(),transactionSignatures:[],simulatedSignatures:[]},e;await F(200)}throw new Error(`Unable to obtain a new blockhash after ${Date.now()-e}ms`)}finally{this._pollingBlockhash=!1}}async simulateTransaction(e,t){if(e.nonceInfo&&t)e.sign(...t);else{let r=this._disableBlockhashCaching;for(;e.recentBlockhash=await this._recentBlockhash(r),t;){if(e.sign(...t),!e.signature)throw new Error("!signature");const n=e.signature.toString("base64");if(!this._blockhashInfo.simulatedSignatures.includes(n)&&!this._blockhashInfo.transactionSignatures.includes(n)){this._blockhashInfo.simulatedSignatures.push(n);break}r=!0}}const r=e.serializeMessage(),n=e._serialize(r).toString("base64"),s={encoding:"base64",commitment:this.commitment};t&&(s.sigVerify=!0);const i=[n,s],o=await this._rpcRequest("simulateTransaction",i),c=Object(g.create)(o,Se);if("error"in c){let e;if("data"in c.error&&(e=c.error.data.logs,e&&Array.isArray(e))){const t="\n    ",r=t+e.join(t);console.error(c.error.message,r)}throw new SendTransactionError("failed to simulate transaction: "+c.error.message,e)}return c.result}async sendTransaction(e,t,r){if(e.nonceInfo)e.sign(...t);else{let r=this._disableBlockhashCaching;for(;;){if(e.recentBlockhash=await this._recentBlockhash(r),e.sign(...t),!e.signature)throw new Error("!signature");const n=e.signature.toString("base64");if(!this._blockhashInfo.transactionSignatures.includes(n)){this._blockhashInfo.transactionSignatures.push(n);break}r=!0}}const n=e.serialize();return await this.sendRawTransaction(n,r)}async sendRawTransaction(e,t){const r=w(e).toString("base64");return await this.sendEncodedTransaction(r,t)}async sendEncodedTransaction(e,t){const r={encoding:"base64"},n=t&&t.skipPreflight,s=t&&t.preflightCommitment||this.commitment;n&&(r.skipPreflight=n),s&&(r.preflightCommitment=s);const i=[e,r],o=await this._rpcRequest("sendTransaction",i),c=Object(g.create)(o,jt);if("error"in c){let e;if("data"in c.error&&(e=c.error.data.logs,e&&Array.isArray(e))){const t="\n    ",r=t+e.join(t);console.error(c.error.message,r)}throw new SendTransactionError("failed to send transaction: "+c.error.message,e)}return c.result}_wsOnOpen(){this._rpcWebSocketConnected=!0,this._rpcWebSocketHeartbeat=setInterval(()=>{this._rpcWebSocket.notify("ping").catch(()=>{})},5e3),this._updateSubscriptions()}_wsOnError(e){console.error("ws error:",e.message)}_wsOnClose(e){this._rpcWebSocketHeartbeat&&(clearInterval(this._rpcWebSocketHeartbeat),this._rpcWebSocketHeartbeat=null),1e3!==e?this._resetSubscriptions():this._updateSubscriptions()}async _subscribe(e,t,r){if(null==e.subscriptionId){e.subscriptionId="subscribing";try{const n=await this._rpcWebSocket.call(t,r);"number"==typeof n&&"subscribing"===e.subscriptionId&&(e.subscriptionId=n)}catch(n){"subscribing"===e.subscriptionId&&(e.subscriptionId=null),console.error(t+" error for argument",r,n.message)}}}async _unsubscribe(e,t){const r=e.subscriptionId;if(null!=r&&"string"!=typeof r){const e=r;try{await this._rpcWebSocket.call(t,[e])}catch(e){console.error(t+" error:",e.message)}}}_resetSubscriptions(){Object.values(this._accountChangeSubscriptions).forEach(e=>e.subscriptionId=null),Object.values(this._programAccountChangeSubscriptions).forEach(e=>e.subscriptionId=null),Object.values(this._rootSubscriptions).forEach(e=>e.subscriptionId=null),Object.values(this._signatureSubscriptions).forEach(e=>e.subscriptionId=null),Object.values(this._slotSubscriptions).forEach(e=>e.subscriptionId=null),Object.values(this._slotUpdateSubscriptions).forEach(e=>e.subscriptionId=null)}_updateSubscriptions(){const e=Object.keys(this._accountChangeSubscriptions).map(Number),t=Object.keys(this._programAccountChangeSubscriptions).map(Number),r=Object.keys(this._slotSubscriptions).map(Number),n=Object.keys(this._slotUpdateSubscriptions).map(Number),s=Object.keys(this._signatureSubscriptions).map(Number),i=Object.keys(this._rootSubscriptions).map(Number),o=Object.keys(this._logsSubscriptions).map(Number);if(0!==e.length||0!==t.length||0!==r.length||0!==n.length||0!==s.length||0!==i.length||0!==o.length)if(null!==this._rpcWebSocketIdleTimeout&&(clearTimeout(this._rpcWebSocketIdleTimeout),this._rpcWebSocketIdleTimeout=null,this._rpcWebSocketConnected=!0),this._rpcWebSocketConnected){for(let t of e){const e=this._accountChangeSubscriptions[t];this._subscribe(e,"accountSubscribe",this._buildArgs([e.publicKey],e.commitment,"base64"))}for(let e of t){const t=this._programAccountChangeSubscriptions[e];this._subscribe(t,"programSubscribe",this._buildArgs([t.programId],t.commitment,"base64",{filters:t.filters}))}for(let e of r){const t=this._slotSubscriptions[e];this._subscribe(t,"slotSubscribe",[])}for(let e of n){const t=this._slotUpdateSubscriptions[e];this._subscribe(t,"slotsUpdatesSubscribe",[])}for(let e of s){const t=this._signatureSubscriptions[e],r=[t.signature];t.options&&r.push(t.options),this._subscribe(t,"signatureSubscribe",r)}for(let e of i){const t=this._rootSubscriptions[e];this._subscribe(t,"rootSubscribe",[])}for(let e of o){const t=this._logsSubscriptions[e];let r;r="object"==typeof t.filter?{mentions:[t.filter.toString()]}:t.filter,this._subscribe(t,"logsSubscribe",this._buildArgs([r],t.commitment))}}else this._rpcWebSocket.connect();else this._rpcWebSocketConnected&&(this._rpcWebSocketConnected=!1,this._rpcWebSocketIdleTimeout=setTimeout(()=>{this._rpcWebSocketIdleTimeout=null,this._rpcWebSocket.close()},500))}_wsOnAccountNotification(e){const t=Object(g.create)(e,Me);for(const e of Object.values(this._accountChangeSubscriptions))if(e.subscriptionId===t.subscription)return void e.callback(t.result.value,t.result.context)}onAccountChange(e,t,r){const n=++this._accountChangeSubscriptionCounter;return this._accountChangeSubscriptions[n]={publicKey:e.toBase58(),callback:t,commitment:r,subscriptionId:null},this._updateSubscriptions(),n}async removeAccountChangeListener(e){if(!this._accountChangeSubscriptions[e])throw new Error("Unknown account change id: "+e);{const t=this._accountChangeSubscriptions[e];delete this._accountChangeSubscriptions[e],await this._unsubscribe(t,"accountUnsubscribe"),this._updateSubscriptions()}}_wsOnProgramAccountNotification(e){const t=Object(g.create)(e,Ve);for(const e of Object.values(this._programAccountChangeSubscriptions))if(e.subscriptionId===t.subscription){const{value:r,context:n}=t.result;return void e.callback({accountId:r.pubkey,accountInfo:r.account},n)}}onProgramAccountChange(e,t,r,n){const s=++this._programAccountChangeSubscriptionCounter;return this._programAccountChangeSubscriptions[s]={programId:e.toBase58(),callback:t,commitment:r,subscriptionId:null,filters:n},this._updateSubscriptions(),s}async removeProgramAccountChangeListener(e){if(!this._programAccountChangeSubscriptions[e])throw new Error("Unknown program account change id: "+e);{const t=this._programAccountChangeSubscriptions[e];delete this._programAccountChangeSubscriptions[e],await this._unsubscribe(t,"programUnsubscribe"),this._updateSubscriptions()}}onLogs(e,t,r){const n=++this._logsSubscriptionCounter;return this._logsSubscriptions[n]={filter:e,callback:t,commitment:r,subscriptionId:null},this._updateSubscriptions(),n}async removeOnLogsListener(e){if(!this._logsSubscriptions[e])throw new Error("Unknown logs id: "+e);const t=this._logsSubscriptions[e];delete this._logsSubscriptions[e],await this._unsubscribe(t,"logsUnsubscribe"),this._updateSubscriptions()}_wsOnLogsNotification(e){const t=Object(g.create)(e,Pt),r=Object.keys(this._logsSubscriptions).map(Number);for(let e of r){const r=this._logsSubscriptions[e];if(r.subscriptionId===t.subscription)return void r.callback(t.result.value,t.result.context)}}_wsOnSlotNotification(e){const t=Object(g.create)(e,$e);for(const e of Object.values(this._slotSubscriptions))if(e.subscriptionId===t.subscription)return void e.callback(t.result)}onSlotChange(e){const t=++this._slotSubscriptionCounter;return this._slotSubscriptions[t]={callback:e,subscriptionId:null},this._updateSubscriptions(),t}async removeSlotChangeListener(e){if(!this._slotSubscriptions[e])throw new Error("Unknown slot change id: "+e);{const t=this._slotSubscriptions[e];delete this._slotSubscriptions[e],await this._unsubscribe(t,"slotUnsubscribe"),this._updateSubscriptions()}}_wsOnSlotUpdatesNotification(e){const t=Object(g.create)(e,Ye);for(const e of Object.values(this._slotUpdateSubscriptions))if(e.subscriptionId===t.subscription)return void e.callback(t.result)}onSlotUpdate(e){const t=++this._slotUpdateSubscriptionCounter;return this._slotUpdateSubscriptions[t]={callback:e,subscriptionId:null},this._updateSubscriptions(),t}async removeSlotUpdateListener(e){if(!this._slotUpdateSubscriptions[e])throw new Error("Unknown slot update id: "+e);{const t=this._slotUpdateSubscriptions[e];delete this._slotUpdateSubscriptions[e],await this._unsubscribe(t,"slotsUpdatesUnsubscribe"),this._updateSubscriptions()}}_buildArgs(e,t,r,n){const s=t||this._commitment;if(s||r||n){let t={};r&&(t.encoding=r),s&&(t.commitment=s),n&&(t=Object.assign(t,n)),e.push(t)}return e}_buildArgsAtLeastConfirmed(e,t,r,n){const s=t||this._commitment;if(s&&!["confirmed","finalized"].includes(s))throw new Error("Using Connection with default commitment: `"+this._commitment+"`, but method requires at least `confirmed`");return this._buildArgs(e,t,r,n)}_wsOnSignatureNotification(e){const t=Object(g.create)(e,Ge);for(const[e,r]of Object.entries(this._signatureSubscriptions))if(r.subscriptionId===t.subscription)return void("receivedSignature"===t.result.value?r.callback({type:"received"},t.result.context):(delete this._signatureSubscriptions[Number(e)],this._updateSubscriptions(),r.callback({type:"status",result:t.result.value},t.result.context)))}onSignature(e,t,r){const n=++this._signatureSubscriptionCounter;return this._signatureSubscriptions[n]={signature:e,callback:(e,r)=>{"status"===e.type&&t(e.result,r)},options:{commitment:r},subscriptionId:null},this._updateSubscriptions(),n}onSignatureWithOptions(e,t,r){const n=++this._signatureSubscriptionCounter;return this._signatureSubscriptions[n]={signature:e,callback:t,options:r,subscriptionId:null},this._updateSubscriptions(),n}async removeSignatureListener(e){if(!this._signatureSubscriptions[e])throw new Error("Unknown signature result id: "+e);{const t=this._signatureSubscriptions[e];delete this._signatureSubscriptions[e],await this._unsubscribe(t,"signatureUnsubscribe"),this._updateSubscriptions()}}_wsOnRootNotification(e){const t=Object(g.create)(e,Je);for(const e of Object.values(this._rootSubscriptions))if(e.subscriptionId===t.subscription)return void e.callback(t.result)}onRootChange(e){const t=++this._rootSubscriptionCounter;return this._rootSubscriptions[t]={callback:e,subscriptionId:null},this._updateSubscriptions(),t}async removeRootChangeListener(e){if(!this._rootSubscriptions[e])throw new Error("Unknown root change id: "+e);{const t=this._rootSubscriptions[e];delete this._rootSubscriptions[e],await this._unsubscribe(t,"rootUnsubscribe"),this._updateSubscriptions()}}}class Keypair{constructor(e){s()(this,"_keypair",void 0),this._keypair=e||i.sign.keyPair()}static generate(){return new Keypair(i.sign.keyPair())}static fromSecretKey(e,t){const r=i.sign.keyPair.fromSecretKey(e);if(!t||!t.skipValidation){const e=(new TextEncoder).encode("@solana/web3.js-validation-v1"),t=i.sign.detached(e,r.secretKey);if(!i.sign.detached.verify(e,t,r.publicKey))throw new Error("provided secretKey is invalid")}return new Keypair(r)}static fromSeed(e){return new Keypair(i.sign.keyPair.fromSeed(e))}get publicKey(){return new PublicKey(this._keypair.publicKey)}get secretKey(){return this._keypair.secretKey}}const It=new PublicKey("StakeConfig11111111111111111111111111111111");class Authorized{constructor(e,t){s()(this,"staker",void 0),s()(this,"withdrawer",void 0),this.staker=e,this.withdrawer=t}}class Lockup{constructor(e,t,r){s()(this,"unixTimestamp",void 0),s()(this,"epoch",void 0),s()(this,"custodian",void 0),this.unixTimestamp=e,this.epoch=t,this.custodian=r}}s()(Lockup,"default",new Lockup(0,0,PublicKey.default));class StakeInstruction{constructor(){}static decodeInstructionType(e){this.checkProgramId(e.programId);const t=p.u32("instruction").decode(e.data);let r;for(const[e,n]of Object.entries(At))if(n.index==t){r=e;break}if(!r)throw new Error("Instruction type incorrect; not a StakeInstruction");return r}static decodeInitialize(e){this.checkProgramId(e.programId),this.checkKeyLength(e.keys,2);const{authorized:t,lockup:r}=H(At.Initialize,e.data);return{stakePubkey:e.keys[0].pubkey,authorized:new Authorized(new PublicKey(t.staker),new PublicKey(t.withdrawer)),lockup:new Lockup(r.unixTimestamp,r.epoch,new PublicKey(r.custodian))}}static decodeDelegate(e){return this.checkProgramId(e.programId),this.checkKeyLength(e.keys,6),H(At.Delegate,e.data),{stakePubkey:e.keys[0].pubkey,votePubkey:e.keys[1].pubkey,authorizedPubkey:e.keys[5].pubkey}}static decodeAuthorize(e){this.checkProgramId(e.programId),this.checkKeyLength(e.keys,3);const{newAuthorized:t,stakeAuthorizationType:r}=H(At.Authorize,e.data),n={stakePubkey:e.keys[0].pubkey,authorizedPubkey:e.keys[2].pubkey,newAuthorizedPubkey:new PublicKey(t),stakeAuthorizationType:{index:r}};return e.keys.length>3&&(n.custodianPubkey=e.keys[3].pubkey),n}static decodeAuthorizeWithSeed(e){this.checkProgramId(e.programId),this.checkKeyLength(e.keys,2);const{newAuthorized:t,stakeAuthorizationType:r,authoritySeed:n,authorityOwner:s}=H(At.AuthorizeWithSeed,e.data),i={stakePubkey:e.keys[0].pubkey,authorityBase:e.keys[1].pubkey,authoritySeed:n,authorityOwner:new PublicKey(s),newAuthorizedPubkey:new PublicKey(t),stakeAuthorizationType:{index:r}};return e.keys.length>3&&(i.custodianPubkey=e.keys[3].pubkey),i}static decodeSplit(e){this.checkProgramId(e.programId),this.checkKeyLength(e.keys,3);const{lamports:t}=H(At.Split,e.data);return{stakePubkey:e.keys[0].pubkey,splitStakePubkey:e.keys[1].pubkey,authorizedPubkey:e.keys[2].pubkey,lamports:t}}static decodeMerge(e){return this.checkProgramId(e.programId),this.checkKeyLength(e.keys,3),H(At.Merge,e.data),{stakePubkey:e.keys[0].pubkey,sourceStakePubKey:e.keys[1].pubkey,authorizedPubkey:e.keys[4].pubkey}}static decodeWithdraw(e){this.checkProgramId(e.programId),this.checkKeyLength(e.keys,5);const{lamports:t}=H(At.Withdraw,e.data),r={stakePubkey:e.keys[0].pubkey,toPubkey:e.keys[1].pubkey,authorizedPubkey:e.keys[4].pubkey,lamports:t};return e.keys.length>5&&(r.custodianPubkey=e.keys[5].pubkey),r}static decodeDeactivate(e){return this.checkProgramId(e.programId),this.checkKeyLength(e.keys,3),H(At.Deactivate,e.data),{stakePubkey:e.keys[0].pubkey,authorizedPubkey:e.keys[2].pubkey}}static checkProgramId(e){if(!e.equals(StakeProgram.programId))throw new Error("invalid instruction; programId is not StakeProgram")}static checkKeyLength(e,t){if(e.length<t)throw new Error(`invalid instruction; found ${e.length} keys, expected at least ${t}`)}}const At=Object.freeze({Initialize:{index:0,layout:p.struct([p.u32("instruction"),((e="authorized")=>p.struct([C("staker"),C("withdrawer")],e))(),((e="lockup")=>p.struct([p.ns64("unixTimestamp"),p.ns64("epoch"),C("custodian")],e))()])},Authorize:{index:1,layout:p.struct([p.u32("instruction"),C("newAuthorized"),p.u32("stakeAuthorizationType")])},Delegate:{index:2,layout:p.struct([p.u32("instruction")])},Split:{index:3,layout:p.struct([p.u32("instruction"),p.ns64("lamports")])},Withdraw:{index:4,layout:p.struct([p.u32("instruction"),p.ns64("lamports")])},Deactivate:{index:5,layout:p.struct([p.u32("instruction")])},Merge:{index:7,layout:p.struct([p.u32("instruction")])},AuthorizeWithSeed:{index:8,layout:p.struct([p.u32("instruction"),C("newAuthorized"),p.u32("stakeAuthorizationType"),T("authoritySeed"),C("authorityOwner")])}}),Et=Object.freeze({Staker:{index:0},Withdrawer:{index:1}});class StakeProgram{constructor(){}static initialize(e){const{stakePubkey:t,authorized:r,lockup:n}=e,s=n||Lockup.default,i=$(At.Initialize,{authorized:{staker:w(r.staker.toBuffer()),withdrawer:w(r.withdrawer.toBuffer())},lockup:{unixTimestamp:s.unixTimestamp,epoch:s.epoch,custodian:w(s.custodian.toBuffer())}}),o={keys:[{pubkey:t,isSigner:!1,isWritable:!0},{pubkey:q,isSigner:!1,isWritable:!1}],programId:this.programId,data:i};return new TransactionInstruction(o)}static createAccountWithSeed(e){const t=new Transaction;t.add(SystemProgram.createAccountWithSeed({fromPubkey:e.fromPubkey,newAccountPubkey:e.stakePubkey,basePubkey:e.basePubkey,seed:e.seed,lamports:e.lamports,space:this.space,programId:this.programId}));const{stakePubkey:r,authorized:n,lockup:s}=e;return t.add(this.initialize({stakePubkey:r,authorized:n,lockup:s}))}static createAccount(e){const t=new Transaction;t.add(SystemProgram.createAccount({fromPubkey:e.fromPubkey,newAccountPubkey:e.stakePubkey,lamports:e.lamports,space:this.space,programId:this.programId}));const{stakePubkey:r,authorized:n,lockup:s}=e;return t.add(this.initialize({stakePubkey:r,authorized:n,lockup:s}))}static delegate(e){const{stakePubkey:t,authorizedPubkey:r,votePubkey:n}=e,s=$(At.Delegate);return(new Transaction).add({keys:[{pubkey:t,isSigner:!1,isWritable:!0},{pubkey:n,isSigner:!1,isWritable:!1},{pubkey:N,isSigner:!1,isWritable:!1},{pubkey:M,isSigner:!1,isWritable:!1},{pubkey:It,isSigner:!1,isWritable:!1},{pubkey:r,isSigner:!0,isWritable:!1}],programId:this.programId,data:s})}static authorize(e){const{stakePubkey:t,authorizedPubkey:r,newAuthorizedPubkey:n,stakeAuthorizationType:s,custodianPubkey:i}=e,o=$(At.Authorize,{newAuthorized:w(n.toBuffer()),stakeAuthorizationType:s.index}),c=[{pubkey:t,isSigner:!1,isWritable:!0},{pubkey:N,isSigner:!1,isWritable:!0},{pubkey:r,isSigner:!0,isWritable:!1}];return i&&c.push({pubkey:i,isSigner:!1,isWritable:!1}),(new Transaction).add({keys:c,programId:this.programId,data:o})}static authorizeWithSeed(e){const{stakePubkey:t,authorityBase:r,authoritySeed:n,authorityOwner:s,newAuthorizedPubkey:i,stakeAuthorizationType:o,custodianPubkey:c}=e,a=$(At.AuthorizeWithSeed,{newAuthorized:w(i.toBuffer()),stakeAuthorizationType:o.index,authoritySeed:n,authorityOwner:w(s.toBuffer())}),u=[{pubkey:t,isSigner:!1,isWritable:!0},{pubkey:r,isSigner:!0,isWritable:!1},{pubkey:N,isSigner:!1,isWritable:!1}];return c&&u.push({pubkey:c,isSigner:!1,isWritable:!1}),(new Transaction).add({keys:u,programId:this.programId,data:a})}static split(e){const{stakePubkey:t,authorizedPubkey:r,splitStakePubkey:n,lamports:s}=e,i=new Transaction;i.add(SystemProgram.createAccount({fromPubkey:r,newAccountPubkey:n,lamports:0,space:this.space,programId:this.programId}));const o=$(At.Split,{lamports:s});return i.add({keys:[{pubkey:t,isSigner:!1,isWritable:!0},{pubkey:n,isSigner:!1,isWritable:!0},{pubkey:r,isSigner:!0,isWritable:!1}],programId:this.programId,data:o})}static merge(e){const{stakePubkey:t,sourceStakePubKey:r,authorizedPubkey:n}=e,s=$(At.Merge);return(new Transaction).add({keys:[{pubkey:t,isSigner:!1,isWritable:!0},{pubkey:r,isSigner:!1,isWritable:!0},{pubkey:N,isSigner:!1,isWritable:!1},{pubkey:M,isSigner:!1,isWritable:!1},{pubkey:n,isSigner:!0,isWritable:!1}],programId:this.programId,data:s})}static withdraw(e){const{stakePubkey:t,authorizedPubkey:r,toPubkey:n,lamports:s,custodianPubkey:i}=e,o=$(At.Withdraw,{lamports:s}),c=[{pubkey:t,isSigner:!1,isWritable:!0},{pubkey:n,isSigner:!1,isWritable:!0},{pubkey:N,isSigner:!1,isWritable:!1},{pubkey:M,isSigner:!1,isWritable:!1},{pubkey:r,isSigner:!0,isWritable:!1}];return i&&c.push({pubkey:i,isSigner:!1,isWritable:!1}),(new Transaction).add({keys:c,programId:this.programId,data:o})}static deactivate(e){const{stakePubkey:t,authorizedPubkey:r}=e,n=$(At.Deactivate);return(new Transaction).add({keys:[{pubkey:t,isSigner:!1,isWritable:!0},{pubkey:N,isSigner:!1,isWritable:!1},{pubkey:r,isSigner:!0,isWritable:!1}],programId:this.programId,data:n})}}s()(StakeProgram,"programId",new PublicKey("Stake11111111111111111111111111111111111111")),s()(StakeProgram,"space",200);const{publicKeyCreate:vt,ecdsaSign:Bt}=O.a,Ct=p.struct([p.u8("numSignatures"),p.u16("signatureOffset"),p.u8("signatureInstructionIndex"),p.u16("ethAddressOffset"),p.u8("ethAddressInstructionIndex"),p.u16("messageDataOffset"),p.u16("messageDataSize"),p.u8("messageInstructionIndex"),p.blob(20,"ethAddress"),p.blob(64,"signature"),p.u8("recoveryId")]);class Secp256k1Program{constructor(){}static publicKeyToEthAddress(e){z(64===e.length,`Public key must be 64 bytes but received ${e.length} bytes`);try{return c.Buffer.from(S.keccak_256.update(w(e)).digest()).slice(-20)}catch(e){throw new Error("Error constructing Ethereum address: "+e)}}static createInstructionWithPublicKey(e){const{publicKey:t,message:r,signature:n,recoveryId:s,instructionIndex:i}=e;return Secp256k1Program.createInstructionWithEthAddress({ethAddress:Secp256k1Program.publicKeyToEthAddress(t),message:r,signature:n,recoveryId:s,instructionIndex:i})}static createInstructionWithEthAddress(e){const{ethAddress:t,message:r,signature:n,recoveryId:s,instructionIndex:i=0}=e;let o;o="string"==typeof t?t.startsWith("0x")?c.Buffer.from(t.substr(2),"hex"):c.Buffer.from(t,"hex"):t,z(20===o.length,`Address must be 20 bytes but received ${o.length} bytes`);const a=12+o.length,u=a+n.length+1,l=c.Buffer.alloc(Ct.span+r.length);return Ct.encode({numSignatures:1,signatureOffset:a,signatureInstructionIndex:i,ethAddressOffset:12,ethAddressInstructionIndex:i,messageDataOffset:u,messageDataSize:r.length,messageInstructionIndex:i,signature:w(n),ethAddress:w(o),recoveryId:s},l),l.fill(w(r),Ct.span),new TransactionInstruction({keys:[],programId:Secp256k1Program.programId,data:l})}static createInstructionWithPrivateKey(e){const{privateKey:t,message:r,instructionIndex:n}=e;z(32===t.length,`Private key must be 32 bytes but received ${t.length} bytes`);try{const e=w(t),s=vt(e,!1).slice(1),i=c.Buffer.from(S.keccak_256.update(w(r)).digest()),{signature:o,recid:a}=Bt(i,e);return this.createInstructionWithPublicKey({publicKey:s,message:r,signature:o,recoveryId:a,instructionIndex:n})}catch(e){throw new Error("Error creating instruction; "+e)}}}s()(Secp256k1Program,"programId",new PublicKey("KeccakSecp256k11111111111111111111111111111"));const Tt=new PublicKey("Va1idator1nfo111111111111111111111111111111"),Kt=Object(g.type)({name:Object(g.string)(),website:Object(g.optional)(Object(g.string)()),details:Object(g.optional)(Object(g.string)()),keybaseUsername:Object(g.optional)(Object(g.string)())});class ValidatorInfo{constructor(e,t){s()(this,"key",void 0),s()(this,"info",void 0),this.key=e,this.info=t}static fromConfigData(e){let t=[...e];if(2!==K(t))return null;const r=[];for(let e=0;e<2;e++){const e=new PublicKey(t.slice(0,32));t=t.slice(32);const n=1===t.slice(0,1)[0];t=t.slice(1),r.push({publicKey:e,isSigner:n})}if(r[0].publicKey.equals(Tt)&&r[1].isSigner){const e=T().decode(c.Buffer.from(t)),n=JSON.parse(e);return Object(g.assert)(n,Kt),new ValidatorInfo(r[1].publicKey,n)}return null}}const Wt=new PublicKey("Vote111111111111111111111111111111111111111"),zt=p.struct([C("nodePubkey"),C("authorizedVoterPubkey"),C("authorizedWithdrawerPubkey"),p.u8("commission"),p.nu64(),p.seq(p.struct([p.nu64("slot"),p.u32("confirmationCount")]),p.offset(p.u32(),-8),"votes"),p.u8("rootSlotValid"),p.nu64("rootSlot"),p.nu64("epoch"),p.nu64("credits"),p.nu64("lastEpochCredits"),p.nu64(),p.seq(p.struct([p.nu64("epoch"),p.nu64("credits"),p.nu64("prevCredits")]),p.offset(p.u32(),-8),"epochCredits")]);class VoteAccount{constructor(e){s()(this,"nodePubkey",void 0),s()(this,"authorizedVoterPubkey",void 0),s()(this,"authorizedWithdrawerPubkey",void 0),s()(this,"commission",void 0),s()(this,"votes",void 0),s()(this,"rootSlot",void 0),s()(this,"epoch",void 0),s()(this,"credits",void 0),s()(this,"lastEpochCredits",void 0),s()(this,"epochCredits",void 0),this.nodePubkey=e.nodePubkey,this.authorizedVoterPubkey=e.authorizedVoterPubkey,this.authorizedWithdrawerPubkey=e.authorizedWithdrawerPubkey,this.commission=e.commission,this.votes=e.votes,this.rootSlot=e.rootSlot,this.epoch=e.epoch,this.credits=e.credits,this.lastEpochCredits=e.lastEpochCredits,this.epochCredits=e.epochCredits}static fromAccountData(e){const t=zt.decode(w(e),0);let r=t.rootSlot;return t.rootSlotValid||(r=null),new VoteAccount({nodePubkey:new PublicKey(t.nodePubkey),authorizedVoterPubkey:new PublicKey(t.authorizedVoterPubkey),authorizedWithdrawerPubkey:new PublicKey(t.authorizedWithdrawerPubkey),commission:t.commission,votes:t.votes,rootSlot:r,epoch:t.epoch,credits:t.credits,lastEpochCredits:t.lastEpochCredits,epochCredits:t.epochCredits})}}async function Rt(e,t,r){const n=r&&{skipPreflight:r.skipPreflight,preflightCommitment:r.preflightCommitment||r.commitment},s=await e.sendRawTransaction(t,n),i=(await e.confirmTransaction(s,r&&r.commitment)).value;if(i.err)throw new Error(`Raw transaction ${s} failed (${JSON.stringify(i)})`);return s}const xt={http:{devnet:"http://api.devnet.solana.com",testnet:"http://api.testnet.solana.com","mainnet-beta":"http://api.mainnet-beta.solana.com"},https:{devnet:"https://api.devnet.solana.com",testnet:"https://api.testnet.solana.com","mainnet-beta":"https://api.mainnet-beta.solana.com"}};function Nt(e,t){const r=!1===t?"http":"https";if(!e)return xt[r].devnet;const n=xt[r][e];if(!n)throw new Error(`Unknown ${r} cluster: ${e}`);return n}const Lt=1e9}}]);