(window.webpackJsonp=window.webpackJsonp||[]).push([[272],{4266:function(e,t,i){"use strict";i.r(t);var s=i(18),a=i.n(s),n=i(1349),r=i(7713),c=i(16),o=i.n(c),h=i(380),d=i.n(h),l=i(35),u=i.n(l),g=i(155),f=i(22),m=i(469),y=i(896);const k=/^(([a-z\d]+[-_])*[a-z\d]+\.)*([a-z\d]+[-_])*[a-z\d]+$/;class NEARCoin extends(Object(m.g)(g.a)){constructor({alias:e,feeData:t,explorers:i,txWebUrl:s,socket:n,network:r}){var c;super({alias:e,name:"NEAR Coin",ticker:"NEAR",decimal:24,derivation:"m/44'/9000'/0'/0/0",txWebUrl:s,explorers:i,socket:n,feeData:t,id:"NEAR",network:r}),a()(this,"updateBalance",u.a.throttle(this._updateBalance,5e3)),this.plugins=[new y.a],this.gasLimit=String(t.gasLimit),this.gasLimitCoefficient=t.gasLimitCoefficient||0,this.gasPriceCoefficient=t.gasPriceCoefficient||0,this.stakingGas=t.stakingGasLimit||"25000000000000",this.stakingGasCoefficient=t.stakingGasLimitCoefficient||5,this.defaultGasPrice=this.toMinimalUnit(t.defaultGasPrice||""),this.bannedTokens=[],this.resendTimeout=t.resendTimeout,this.balances={},this.unspendableBalance="0",this.network=r,this.fields.paymentId=!1,this.tokens={},this.nonce=new this.BN("0"),this.activated=!1,this.activationAmount="100000000000000000000000",this.eventEmmiter.on(this.ticker+"::confirmed-socket-tx",(e,t,i)=>{this.bus.$emit("socket::tx::confirmed",{id:e,ticker:i})}),this.reserveForStake=null!==(c=t.reserveForStake)&&void 0!==c?c:"100000000000000000000000"}manageSocket(){["confirm","receive"].forEach(e=>this.eventEmmiter.on(e,({address:t,hash:i,ticker:s})=>{this.ticker===s&&this.blockbook.getSocketTransaction({address:t,hash:i,tokens:this.tokens,type:e})}))}get instance(){return{id:this.id,ticker:this.ticker,name:this.name,decimal:this.decimal,address:this.address,parent:this.parent,BN:o(),toCurrencyUnit:e=>this.toCurrencyUnit(e),toMinimalUnit:e=>this.toMinimalUnit(e),alias:this.alias,feeCoefficient:this.coefficient,feeDefault:this.feeData&&this.feeData.fee,gasLimit:this.gasLimit,chainId:this.chainId}}get stakingGasLimit(){return new this.BN(this.stakingGas).mul(new this.BN(this.stakingGasCoefficient)).toString()}async loadWallet(e,t){try{const{KeyPair:e}=n,i=e.fromString(Object(r.parseSeedPhrase)(t).secretKey);return this.keyPair=i,this.privateKey=i.toString(),this.address=Buffer.from(i.getPublicKey().data).toString("hex"),this}catch(e){return f.a.error({instance:this,error:e}),this}}getAddress(){return this.privateKey?this.address:new Error(this.wallet.ticker+" private key is empty!!!")}validateAddress(e){return e.length>=2&&e.length<=64&&k.test(e)}async createDelegationTransaction({amount:e,validator:t,nonce:i}){const{transactions:s}=n,a=this.keyPair.getPublicKey(),r=await this.getProvider("node").getAccessKey(this.address,a),c=n.utils.serialize.base_decode(r.block_hash),o=[s.functionCall("deposit_and_stake",{},this.stakingGasLimit,e)],h=n.transactions.createTransaction(this.address,a,t,r.nonce+1,o,c);return this.serializeAndSignTransaction(h)}async createUnDelegationTransaction({amount:e,validator:t,nonce:i}){const{transactions:s}=n,a=this.keyPair.getPublicKey(),r=await this.getProvider("node").getAccessKey(this.address,a),c=n.utils.serialize.base_decode(r.block_hash),o=[s.functionCall("unstake",{amount:null!=e?e:void 0},this.stakingGasLimit,"0")],h=n.transactions.createTransaction(this.address,a,t,r.nonce+1,o,c);return this.serializeAndSignTransaction(h)}async createWithdrawDelegationTransaction({validator:e,nonce:t}){const{transactions:i}=n,s=this.keyPair.getPublicKey(),a=await this.getProvider("node").getAccessKey(this.address,s),r=n.utils.serialize.base_decode(a.block_hash),c=[i.functionCall("withdraw_all",{},this.stakingGasLimit,"0")],o=n.transactions.createTransaction(this.address,s,e,a.nonce+1,c,r);return this.serializeAndSignTransaction(o)}async createTransaction({address:e,amount:t,nonce:i}){const s=this.keyPair.getPublicKey(),a=await this.getProvider("node").getAccessKey(this.address,s),r=n.utils.serialize.base_decode(a.block_hash),c=[new n.transactions.Action({transfer:new n.transactions.Transfer({deposit:t})})],o=n.transactions.createTransaction(this.address,s,e,i||a.nonce+1,c,r);return this.serializeAndSignTransaction(o)}serializeTransaction(e){const t=n.utils.serialize.serialize(n.transactions.SCHEMA,e);return{txHash:new Uint8Array(d()(t,{asBytes:!0})),rawTx:e}}signTransaction({txHash:e,rawTx:t}){const{signature:i}=this.keyPair.sign(e),s=new n.transactions.SignedTransaction({transaction:t,signature:new n.transactions.Signature({keyType:t.publicKey.keyType,data:i})});return Buffer.from(s.encode()).toString("base64")}serializeAndSignTransaction(e){return this.signTransaction(this.serializeTransaction(e))}async getTransactions(){if(!this.address)throw new Error(this.wallet.ticker+" address not found");return this.getProvider("history").getTransactions({address:this.address})}async getFee({userGasPrice:e=null,gasLimit:t=null,contract:i,address:s}={}){return new this.BN(t||await this.estimateGas(null,s,i)).mul(new this.BN(e||await this.getGasPrice()))}async getGasPrice(e=!1,t=!1){const i=await this.getProvider("node").getGasPrice();return e?new this.BN(i||this.defaultGasPrice):new this.BN(i||this.defaultGasPrice).add(new this.BN(this.gasPriceCoefficient))}async estimateGas(e,t,i){const s=await this.getProvider("node").getNodeConfig();if(!s)return new this.BN(this.gasLimit).add(new this.BN(this.gasLimitCoefficient)).toString();const a=[s.runtime_config.transaction_costs.action_receipt_creation_config,s.runtime_config.transaction_costs.action_creation_config[i?"transfer_cost":"function_call_cost"]],n=[t===this.address?"send_sir":"send_not_sir","execution"];return a.reduce((e,t)=>e.add(n.reduce((e,i)=>e.add(new this.BN(t[i])),new this.BN(0))),new this.BN(0)).add(new this.BN(this.gasLimitCoefficient)).toString()}async availableBalance(e){await this.updateBalance();const t=new this.BN(this.balance).sub(new this.BN(new this.BN(e).gt(new this.BN(0))?e:await this.getFee())).sub(new this.BN(this.unspendableBalance)).sub(new this.BN(this.reserveForStake));return t.gt(new this.BN(0))?this.toCurrencyUnit(t):"0"}async _updateBalance(){try{const{balance:e,unspendable:t}=await this.getProvider("node").getInfo(this.address,{gasLimit:this.stakingGasLimit,gasPrice:await this.getGasPrice(),reserve:new this.BN(this.reserveForStake)});if(!e)throw new Error(this.ticker+" can't get balance");this.balance=e,this.unspendableBalance=t}catch(e){f.a.error({instance:this,error:e})}}async getInfo(){if(!this.address)throw new Error(this.ticker+" address not found");return await this.updateBalance(),{balance:this.balance,balances:this.balances}}async getStakingInfo(){null===this.balance&&await this.updateBalance();const e=await this.getProvider("node").getStakingInfo(this.address,{balance:this.balance,reserve:this.reserveForStake,unspendableBalance:this.unspendableBalance,gasLimit:this.stakingGasLimit,gasPrice:await this.getGasPrice()});return this.balances=e,{balances:e}}gasPrice(){return this.getGasPrice()}setPrivateKey(e,t){this.loadWallet("",t)}async checkTransaction(e){await super.checkTransaction({feeTicker:this.ticker,...e,fee:null})}async getBalance(){return(await this.getInfo()).balance}}t.default=NEARCoin},7713:function(e,t,i){const s=i(1750),{derivePath:a}=i(7714),n=i(42),r=i(79),c=e=>e.trim().split(/\s+/).map(e=>e.toLowerCase()).join(" "),o=(e,t)=>{const i=s.mnemonicToSeed(c(e)),{key:o}=a(t||"m/44'/397'/0'",i.toString("hex")),h=r.sign.keyPair.fromSeed(o),d="ed25519:"+n.encode(Buffer.from(h.publicKey));return{seedPhrase:e,secretKey:"ed25519:"+n.encode(Buffer.from(h.secretKey)),publicKey:d}};e.exports={KEY_DERIVATION_PATH:"m/44'/397'/0'",generateSeedPhrase:e=>o(void 0!==e?s.entropyToMnemonic(e):s.generateMnemonic()),normalizeSeedPhrase:c,parseSeedPhrase:o,findSeedPhraseKey:(e,t)=>{const i=o(e);return t.indexOf(i.publicKey)<0?{}:i}}},7714:function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.derivePath=t.isValidPath=t.getPublicKey=t.getMasterKeyFromSeed=void 0;const s=i(271),a=i(79),n=i(7715);t.getMasterKeyFromSeed=e=>{const t=s("sha512","ed25519 seed").update(Buffer.from(e,"hex")).digest();return{key:t.slice(0,32),chainCode:t.slice(32)}};t.getPublicKey=(e,t=!0)=>{const i=a.sign.keyPair.fromSeed(e).secretKey.subarray(32),s=Buffer.alloc(1,0);return t?Buffer.concat([s,Buffer.from(i)]):Buffer.from(i)},t.isValidPath=e=>!!n.pathRegex.test(e)&&!e.split("/").slice(1).map(n.replaceDerive).some(isNaN),t.derivePath=(e,i,a=2147483648)=>{if(!t.isValidPath(e))throw new Error("Invalid derivation path");const{key:r,chainCode:c}=t.getMasterKeyFromSeed(i);return e.split("/").slice(1).map(n.replaceDerive).map(e=>parseInt(e,10)).reduce((e,t)=>(({key:e,chainCode:t},i)=>{const a=Buffer.allocUnsafe(4);a.writeUInt32BE(i,0);const n=Buffer.concat([Buffer.alloc(1,0),e,a]),r=s("sha512",t).update(n).digest();return{key:r.slice(0,32),chainCode:r.slice(32)}})(e,t+a),{key:r,chainCode:c})}},7715:function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.replaceDerive=t.pathRegex=void 0,t.pathRegex=new RegExp("^m(\\/[0-9]+')+$"),t.replaceDerive=e=>e.replace("'","")}}]);